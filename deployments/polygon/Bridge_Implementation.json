{
  "address": "0xa06587A30877C44e16B7A83e03AB408aFadFE821",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IBridge.Assets",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "receiver",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "targetChain",
          "type": "string"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IBridge.Assets",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "receiver",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "targetChain",
          "type": "string"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IBridge.Assets",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "targetChain",
          "type": "string"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldChain",
          "type": "string"
        }
      ],
      "name": "RemoveChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newFeeRateBp",
          "type": "uint256"
        }
      ],
      "name": "SetFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newChain",
          "type": "string"
        }
      ],
      "name": "SetNewChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IBridge.Assets",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "targetChain",
          "type": "string"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOT_MESSENGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "botMessenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridge.Assets",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "receiver",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "targetChain",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "stargateAmountForOneUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferedTokensAmountForOneUsd",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "payFeesWithST",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IBridge.sourceBridgeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "burnWithPermit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stargateAmountForOneUsd",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "payFeesWithST",
          "type": "bool"
        }
      ],
      "name": "calcFeeFixed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stargateAmountForOneUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transferedTokensAmountForOneUsd",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "payFeesWithST",
          "type": "bool"
        }
      ],
      "name": "calcFeeScaled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_botMessenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_chain",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridge.Assets",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "receiver",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "targetChain",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "stargateAmountForOneUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferedTokensAmountForOneUsd",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "payFeesWithST",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IBridge.sourceBridgeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "lockWithPermit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridge.Assets",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IBridge.targetBridgeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "mintWithPermit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokeid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokeid",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "oldChain",
          "type": "string"
        }
      ],
      "name": "removeSupportedChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBotMessenger",
          "type": "address"
        }
      ],
      "name": "setBotMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStablecoin",
          "type": "address"
        }
      ],
      "name": "setStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStargateToken",
          "type": "address"
        }
      ],
      "name": "setStargateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newChain",
          "type": "string"
        }
      ],
      "name": "setSupportedChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "supportedChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridge.Assets",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IBridge.targetBridgeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "unlockWithPermit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cb95a0ae81c33439a2c0aad8207de606713ac0dc4c132a04aa7b286f69b78cb",
  "receipt": {
    "to": null,
    "from": "0xA55E09d85297953a3f688CF59667B9e4c9bE954E",
    "contractAddress": "0xa06587A30877C44e16B7A83e03AB408aFadFE821",
    "transactionIndex": 64,
    "gasUsed": "3323377",
    "logsBloom": "0x
    "blockHash": "0x554305e9ca3696c252dc478e17f697b960839bf30d87511d0e53a507f2bbc87e",
    "transactionHash": "0x3cb95a0ae81c33439a2c0aad8207de606713ac0dc4c132a04aa7b286f69b78cb",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 47762363,
        "transactionHash": "0x3cb95a0ae81c33439a2c0aad8207de606713ac0dc4c132a04aa7b286f69b78cb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a55e09d85297953a3f688cf59667b9e4c9be954e",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016ae6bab6823c01000000000000000000000000000000000000000000000000829d7045bf3a49e9000000000000000000000000000000000000000000000effd7ab8002e55f29160000000000000000000000000000000000000000000000008132898b08b80de8000000000000000000000000000000000000000000000effd91666bd9be16517",
        "logIndex": 750,
        "blockHash": "0x554305e9ca3696c252dc478e17f697b960839bf30d87511d0e53a507f2bbc87e"
      }
    ],
    "blockNumber": 47762363,
    "cumulativeGasUsed": "14457080",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7bfef034aa58ef01a1693110ba227afa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IBridge.Assets\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetChain\",\"type\":\"string\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IBridge.Assets\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetChain\",\"type\":\"string\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IBridge.Assets\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetChain\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldChain\",\"type\":\"string\"}],\"name\":\"RemoveChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFeeRateBp\",\"type\":\"uint256\"}],\"name\":\"SetFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newChain\",\"type\":\"string\"}],\"name\":\"SetNewChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IBridge.Assets\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetChain\",\"type\":\"string\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOT_MESSENGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridge.Assets\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetChain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stargateAmountForOneUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferedTokensAmountForOneUsd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payFeesWithST\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBridge.sourceBridgeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"burnWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stargateAmountForOneUsd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payFeesWithST\",\"type\":\"bool\"}],\"name\":\"calcFeeFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stargateAmountForOneUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferedTokensAmountForOneUsd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payFeesWithST\",\"type\":\"bool\"}],\"name\":\"calcFeeScaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botMessenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_chain\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridge.Assets\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetChain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stargateAmountForOneUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferedTokensAmountForOneUsd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payFeesWithST\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBridge.sourceBridgeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"lockWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridge.Assets\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBridge.targetBridgeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mintWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokeid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokeid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"oldChain\",\"type\":\"string\"}],\"name\":\"removeSupportedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBotMessenger\",\"type\":\"address\"}],\"name\":\"setBotMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStablecoin\",\"type\":\"address\"}],\"name\":\"setStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStargateToken\",\"type\":\"address\"}],\"name\":\"setStargateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newChain\",\"type\":\"string\"}],\"name\":\"setSupportedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"supportedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridge.Assets\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBridge.targetBridgeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"unlockWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnWithPermit(uint8,(uint256,address,uint256,string,string,uint256,uint256,bool,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"assetType\":\"0-native, 1-ERC20, 2-ERC721, 3-ERC1155\",\"params\":\"sourceBridgeParams structure (see definition in IBridge.sol)\"},\"returns\":{\"_0\":\"True if tokens were burned successfully\"}},\"calcFeeFixed(uint256,uint256,bool)\":{\"params\":{\"amount\":\"An amount of tokens that were sent (always 1 if ERC721)\",\"payFeesWithST\":\"true if user choose to pay fees with stargate tokens\",\"stargateAmountForOneUsd\":\"Stargate tokens (ST) amount for one USD\"},\"returns\":{\"_0\":\"The fee amount in ST or USD depending on user's preferences\"}},\"calcFeeScaled(uint256,uint256,uint256,bool)\":{\"params\":{\"amount\":\"An amount of TT tokens that were sent\",\"payFeesWithST\":\"true if user choose to pay fees with stargate tokens\",\"stargateAmountForOneUsd\":\"Stargate tokens (ST) amount for one USD\",\"transferedTokensAmountForOneUsd\":\"TT tokens amount for one USD\"},\"returns\":{\"_0\":\"The fee amount in ST or TT depending on user's preferences\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,string)\":{\"params\":{\"_botMessenger\":\"The address of bot messenger\",\"_chain\":\"The chain bridge was deployed to\",\"_stablecoin\":\"The address of USD stablecoin\"}},\"lockWithPermit(uint8,(uint256,address,uint256,string,string,uint256,uint256,bool,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"assetType\":\"0-native, 1-ERC20, 2-ERC721, 3-ERC1155\",\"params\":\"sourceBridgeParams structure (see definition in IBridge.sol)\"},\"returns\":{\"_0\":\"True if tokens were locked successfully\"}},\"mintWithPermit(uint8,(uint256,address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"assetType\":\"0-native, 1-ERC20, 2-ERC721, 3-ERC1155\",\"params\":\"targetBridgeParams structure (see definition in IBridge.sol)\"},\"returns\":{\"_0\":\"True if tokens were minted successfully\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Should return the selector of itselfWhenever an ERC1155 token is transferred to this contract       via ERC1155.safeTransferFrom this function is called   \"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Should return the selector of itselfWhenever an ERC721 token is transferred to this contract       via ERC721.safeTransferFrom this function is called   \"},\"removeSupportedChain(string)\":{\"params\":{\"oldChain\":\"The name of the chain\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAdmin(address)\":{\"params\":{\"newAdmin\":\"Address of the admin   \"}},\"setBotMessenger(address)\":{\"params\":{\"newBotMessenger\":\"Address of the bot messenger (backend server)   \"}},\"setStablecoin(address)\":{\"params\":{\"newStablecoin\":\"Address of the stablecoin\"}},\"setStargateToken(address)\":{\"params\":{\"newStargateToken\":\"Address of the stargate token   \"}},\"setSupportedChain(string)\":{\"params\":{\"newChain\":\"The name of the chain\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unlockWithPermit(uint8,(uint256,address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"assetType\":\"0-native, 1-ERC20, 2-ERC721, 3-ERC1155\",\"params\":\"targetBridgeParams structure (see definition in IBridge.sol)\"},\"returns\":{\"_0\":\"True if tokens were unlocked successfully\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount of fees from a single token to be withdrawn\",\"token\":\"The address of the token which transfers collected fees\"}}},\"stateVariables\":{\"lastNonce\":{\"details\":\"Last verified nonce\"},\"nonces\":{\"details\":\"Monitor nonces. Prevent replay attacks\"},\"supportedChains\":{\"details\":\"Names of supported chains\"},\"tokenFees\":{\"details\":\"Monitor fees for ERC20 tokensMap from token address to fees\"}},\"title\":\"A bridge contract\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(uint8,address,string,uint256,address,uint256,string)\":{\"notice\":\"Indicates that tokens were burnt in the target chain\"},\"Lock(uint8,address,string,uint256,address,uint256,string)\":{\"notice\":\"Indicates that tokens were locked in the source chain\"},\"Mint(uint8,address,address,uint256,address,uint256,string)\":{\"notice\":\"Indicates that tokens were minted by permitted user\"},\"RemoveChain(string)\":{\"notice\":\"Indicates that a chain is no longer supported\"},\"SetAdmin(address)\":{\"notice\":\"Indicates that the a admin was set\"},\"SetFeeRate(uint256)\":{\"notice\":\"Indicates that a new fee rate was set\"},\"SetNewChain(string)\":{\"notice\":\"Indicates that a new supported chain was set\"},\"Unlock(uint8,address,address,uint256,address,uint256,string)\":{\"notice\":\"Indicates that tokens were unlocked in the source chain\"},\"Withdraw(address,uint256)\":{\"notice\":\"Indicates that token fees were withdrawn\"}},\"kind\":\"user\",\"methods\":{\"burnWithPermit(uint8,(uint256,address,uint256,string,string,uint256,uint256,bool,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Burn tokens if the user is permitted to burn\"},\"calcFeeFixed(uint256,uint256,bool)\":{\"notice\":\"Calculates a fee for bridge operations with ERC721 and ERC1155 tokens\"},\"calcFeeScaled(uint256,uint256,uint256,bool)\":{\"notice\":\"Calculates a fee for bridge operations with ERC20 and native tokens\"},\"chain()\":{\"notice\":\"The chain bringe was deployed to\"},\"initialize(address,address,string)\":{\"notice\":\"Initializes internal variables, sets roles\"},\"lockWithPermit(uint8,(uint256,address,uint256,string,string,uint256,uint256,bool,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Locks tokens if the user is permitted to lock\"},\"mintWithPermit(uint8,(uint256,address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Mint tokens if the user is permitted to mint\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Allow this contract to receiver ERC1155 tokens\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Allow this contract to receiver ERC721 tokens\"},\"removeSupportedChain(string)\":{\"notice\":\"Removes a chain supported by the bridge\"},\"setAdmin(address)\":{\"notice\":\"Sets the admin\"},\"setBotMessenger(address)\":{\"notice\":\"Sets the bot messenger\"},\"setStablecoin(address)\":{\"notice\":\"Sets the stablecoin\"},\"setStargateToken(address)\":{\"notice\":\"Sets the stargate token\"},\"setSupportedChain(string)\":{\"notice\":\"Adds a chain supported by the bridge\"},\"unlockWithPermit(uint8,(uint256,address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Unlocks tokens if the user is permitted to unlock\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraws fees accumulated from a specific token operations\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd25b5dd88ee621810335aa7272faeeb2a4c4151b19ce4ac0d7ce75a347bb53b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbf46574f5b3e5ae4d823b06fef6fe20ed32a4c4cd5bb9cd07d1712da624321fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x49dc49ecb70251b262769f4cd54fea0e6714d84e30b2737885c76194c285b452\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x992b28e9cd85d3614bf2f0ad8225164128abdf44fb533db8587e8a64e0d9883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x382f704a068eb9b9e3c73c7acef54b464043aa12ea0abacfd0b8440c6e1e4e4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\nimport \\\"./interfaces/IWrappedERC20.sol\\\";\\nimport \\\"./interfaces/IWrappedERC721.sol\\\";\\nimport \\\"./interfaces/IWrappedERC1155.sol\\\";\\n\\nimport \\\"./base/EIP712Utils.sol\\\";\\n\\n/// @title A bridge contract\\ncontract Bridge is\\n    EIP712Utils,\\n    IERC721Receiver,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n\\n    using SafeERC20Upgradeable for IWrappedERC20;\\n\\n    // @dev Padding 100 words of storage for upgradeability. Follows OZ's guidance.\\n    uint256[100] private __gap;\\n    /// @dev Names of supported chains\\n    mapping(string => bool) public supportedChains;\\n    /// @dev Monitor fees for ERC20 tokens\\n    /// @dev Map from token address to fees\\n    mapping(address => uint256) public tokenFees;\\n    /// @dev Monitor nonces. Prevent replay attacks\\n    mapping(uint256 => bool) public nonces;\\n\\n    bytes32 public constant BOT_MESSENGER_ROLE = keccak256(\\\"BOT_MESSENGER_ROLE\\\");\\n    address public botMessenger;\\n    address public stablecoin;\\n    address public stargateToken;\\n    /// @dev Last verified nonce\\n    uint256 public lastNonce;\\n\\n    /// @notice The chain bringe was deployed to\\n    string public chain; // Shouldn't change after initialization\\n\\n    //========== Fees ==========\\n\\n    uint256 private constant PERCENT_DENOMINATOR = 100_000;\\n\\n    uint256 private constant MIN_ERC20_ST_FEE_USD = 750;//$0.0075\\n    uint256 private constant MAX_ERC20_ST_FEE_USD = 15000;//$0.15\\n    uint256 private constant MIN_ERC20_TT_FEE_USD = 1000;//$0.01\\n    uint256 private constant MAX_ERC20_TT_FEE_USD = 20000;//$0.2\\n    uint256 private constant ERC20_ST_FEE_RATE = 225;//0.225%\\n    uint256 private constant ERC20_TT_FEE_RATE = 300;//0.3%\\n    uint256 private constant ERC721_1155_ST_FEE_USD = 20000;//$0.2 \\n    uint256 private constant ERC721_1155_FEE_USD = 30000;//$0.3\\n\\n    /// @dev Checks if caller is an admin\\n    modifier onlyAdmin {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Bridge: the caller is not an admin!\\\");\\n        _;\\n    }\\n\\n    /// @dev Checks the contracts is supported on the given chain\\n    modifier isSupportedChain(string memory _chain) {\\n        require(supportedChains[_chain], \\\"Bridge: the chain is not supported!\\\");\\n        _;\\n    }\\n\\n    /// @notice Initializes internal variables, sets roles\\n    /// @param _botMessenger The address of bot messenger\\n    /// @param _stablecoin The address of USD stablecoin\\n    /// @param _chain The chain bridge was deployed to\\n    function initialize(\\n        address _botMessenger,\\n        address _stablecoin,\\n        string memory _chain\\n    ) public initializer\\n    {\\n        require(_botMessenger != address(0), \\\"Bridge: default bot messenger can not be zero address!\\\");\\n        require(_stablecoin != address(0), \\\"Bridge: stablecoin can not be zero address!\\\");\\n        // The caller becomes an admin\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        // The provided address gets a special role (used in signature verification)\\n        botMessenger = _botMessenger;\\n        stablecoin = _stablecoin;\\n        chain = _chain;\\n        _setupRole(BOT_MESSENGER_ROLE, botMessenger);\\n\\n    }\\n\\n    /// @notice Allow this contract to receiver ERC721 tokens\\n    /// @dev Should return the selector of itself\\n    /// @dev Whenever an ERC721 token is transferred to this contract \\n    ///      via ERC721.safeTransferFrom this function is called   \\n    function onERC721Received(address operator, address from, uint256 tokeid, bytes calldata data)\\n    public \\n    returns (bytes4) \\n    {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /// @notice Allow this contract to receiver ERC1155 tokens\\n    /// @dev Should return the selector of itself\\n    /// @dev Whenever an ERC1155 token is transferred to this contract \\n    ///      via ERC1155.safeTransferFrom this function is called   \\n    function onERC1155Received(address operator, address from, uint256 tokeid, uint256 amount, bytes calldata data)\\n    public \\n    returns (bytes4) \\n    {\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    /// @notice Locks tokens if the user is permitted to lock\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param params sourceBridgeParams structure (see definition in IBridge.sol)\\n    /// @return True if tokens were locked successfully\\n    function lockWithPermit(Assets assetType, sourceBridgeParams calldata params)\\n        external\\n        payable\\n        isSupportedChain(params.targetChain)\\n        nonReentrant\\n        returns(bool) \\n    {   \\n        if(assetType != Assets.Native)\\n            require(msg.value == 0, \\\"Bridge: wrong asset, only native lock payable\\\");\\n\\n        address sender = msg.sender;\\n        // Verify the signature (contains v, r, s) using the domain separator\\n        // This will prove that the user has burnt tokens on the target chain\\n        bytes32 typeHash = EIP712Utils.getVerifyPriceTypeHash(params);\\n        signatureVerification(typeHash, params.nonce, params.v, params.r, params.s);\\n        // Calculate the fee and save it\\n        uint256 feeAmount;\\n        if(assetType == Assets.Native || assetType == Assets.ERC20){\\n            feeAmount = calcFeeScaled(\\n                params.amount,\\n                params.stargateAmountForOneUsd,\\n                params.transferedTokensAmountForOneUsd,\\n                params.payFeesWithST\\n            );\\n        } else {\\n            feeAmount = calcFeeFixed(\\n                params.amount,\\n                params.stargateAmountForOneUsd,\\n                params.payFeesWithST\\n            );\\n        }\\n        if(params.payFeesWithST) \\n            payFees(sender, stargateToken, feeAmount);\\n        if(!params.payFeesWithST && assetType == Assets.ERC20) \\n            payFees(sender, params.token, feeAmount);\\n        if(!params.payFeesWithST && assetType == Assets.Native){\\n            require(\\n                msg.value >= params.amount + feeAmount,\\n                \\\"Bridge: not enough native tokens were sent to cover the fees!\\\"\\n            );\\n            tokenFees[params.token] += feeAmount;\\n        }\\n        //Pay with stablecoins if you bridge ERC721 or ERC1155 and do not want to use ST\\n        if(!params.payFeesWithST && (assetType == Assets.ERC721 || assetType == Assets.ERC1155)) \\n            payFees(sender, stablecoin, feeAmount);\\n\\n        processAsset(\\n            assetType,\\n            sender,\\n            params.token,\\n            params.tokenId,\\n            params.amount\\n        );\\n\\n        emit Lock(\\n            assetType,\\n            sender,\\n            params.receiver,\\n            params.amount,\\n            params.token,\\n            params.tokenId,\\n            params.targetChain\\n        );\\n        return true;\\n    }\\n\\n    /// @notice Burn tokens if the user is permitted to burn\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param params sourceBridgeParams structure (see definition in IBridge.sol)\\n    /// @return True if tokens were burned successfully\\n    function burnWithPermit(Assets assetType, sourceBridgeParams calldata params)\\n        external\\n        isSupportedChain(params.targetChain)\\n        nonReentrant\\n        returns(bool) \\n    {       \\n        require(assetType != Assets.Native, \\\"Bridge: wrong asset, can't burn native token\\\");\\n        address sender = msg.sender;\\n        // Verify the signature (contains v, r, s) using the domain separator\\n        // This will prove that the user has burnt tokens on the target chain\\n        bytes32 typeHash = EIP712Utils.getVerifyPriceTypeHash(params);\\n        signatureVerification(typeHash, params.nonce, params.v, params.r, params.s);\\n        // Calculate the fee and save it\\n        uint256 feeAmount;\\n        if(assetType == Assets.Native || assetType == Assets.ERC20){\\n            feeAmount = calcFeeScaled(\\n                params.amount,\\n                params.stargateAmountForOneUsd,\\n                params.transferedTokensAmountForOneUsd,\\n                params.payFeesWithST\\n            );\\n        } else {\\n            feeAmount = calcFeeFixed(\\n                params.amount,\\n                params.stargateAmountForOneUsd,\\n                params.payFeesWithST\\n            );\\n        }\\n\\n        if(params.payFeesWithST) \\n            payFees(sender, stargateToken, feeAmount);\\n        if(!params.payFeesWithST && assetType == Assets.ERC20) \\n            payFees(sender, params.token, feeAmount);\\n        //Pay with stablecoins if you bridge ERC721 or ERC1155 and do not want to use ST\\n        if(!params.payFeesWithST && (assetType == Assets.ERC721 || assetType == Assets.ERC1155)) \\n            payFees(sender, stablecoin, feeAmount);\\n\\n        discardAsset(\\n            assetType,\\n            sender,\\n            params.token,\\n            params.tokenId,\\n            params.amount\\n        );\\n\\n        emit Burn(\\n            assetType,\\n            sender,\\n            params.receiver,\\n            params.amount,\\n            params.token,\\n            params.tokenId,\\n            params.targetChain\\n        );\\n        return true;\\n    }\\n\\n    /// @notice Mint tokens if the user is permitted to mint\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param params targetBridgeParams structure (see definition in IBridge.sol)\\n    /// @return True if tokens were minted successfully\\n    function mintWithPermit(Assets assetType, targetBridgeParams calldata params)\\n        external\\n        nonReentrant\\n        returns(bool) \\n    {        \\n        require(assetType != Assets.Native, \\\"Bridge: wrong asset, can't mint native token\\\");\\n        address sender = msg.sender;\\n        // Verify the signature (contains v, r, s) using the domain separator\\n        // This will prove that the user has burnt tokens on the target chain\\n        bytes32 typeHash = EIP712Utils.getPermitTypeHash(sender, params, chain);\\n        signatureVerification(typeHash, params.nonce, params.v, params.r, params.s);\\n\\n        mintAsset(\\n            assetType,\\n            sender,\\n            params.token,\\n            params.tokenId,\\n            params.amount\\n        );\\n\\n        emit Mint(\\n            assetType,\\n            sender,\\n            sender,\\n            params.amount,\\n            params.token,\\n            params.tokenId,\\n            chain\\n        );\\n        return true;\\n    }\\n\\n    /// @notice Unlocks tokens if the user is permitted to unlock\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param params targetBridgeParams structure (see definition in IBridge.sol)\\n    /// @return True if tokens were unlocked successfully\\n    function unlockWithPermit(Assets assetType, targetBridgeParams calldata params)\\n        external\\n        nonReentrant\\n        returns(bool) \\n    {        \\n        address sender = msg.sender;\\n        // Verify the signature (contains v, r, s) using the domain separator\\n        // This will prove that the user has burnt tokens on the target chain\\n        bytes32 typeHash = EIP712Utils.getPermitTypeHash(sender, params, chain);\\n        signatureVerification(typeHash, params.nonce, params.v, params.r, params.s);\\n        \\n        unlockAsset(\\n            assetType,\\n            sender,\\n            params.token,\\n            params.tokenId,\\n            params.amount\\n        );\\n\\n        emit Unlock(\\n            assetType,\\n            sender,\\n            sender,\\n            params.amount,\\n            params.token,\\n            params.tokenId,\\n            chain\\n        );\\n        return true;\\n    }\\n\\n    /// @dev Verifies that chain signature is valid \\n    /// @param typeHash abi encoded type hash digest\\n    /// @param nonce Prevent replay attacks\\n    /// @param v Last byte of the signed PERMIT_DIGEST\\n    /// @param r First 32 bytes of the signed PERMIT_DIGEST\\n    /// @param v 32-64 bytes of the signed PERMIT_DIGEST\\n    function signatureVerification(\\n        bytes32 typeHash,\\n        uint256 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        require(!nonces[nonce], \\\"Bridge: request already processed!\\\");\\n\\n        bytes32 permitDigest = EIP712Utils.getPermitDigest(typeHash);\\n        // Recover the signer of the PERMIT_DIGEST\\n        address signer = ecrecover(permitDigest, v, r, s);\\n        // Compare the recover and the required signer\\n        require(signer == botMessenger, \\\"Bridge: invalid signature!\\\");\\n\\n        nonces[nonce] = true;\\n        lastNonce = nonce;\\n    }\\n\\n    //==========Helper Functions==========\\n\\n    /// @notice Sets the admin\\n    /// @param newAdmin Address of the admin   \\n    function setAdmin(address newAdmin) external onlyAdmin {\\n        require(newAdmin != address(0), \\\"Bridge: new admin can not have a zero address!\\\");\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        emit SetAdmin(newAdmin);\\n    }\\n\\n    /// @notice Sets the stablecoin\\n    /// @param newStablecoin Address of the stablecoin\\n    function setStablecoin(address newStablecoin) external onlyAdmin {\\n        stablecoin = newStablecoin;\\n    }\\n\\n    /// @notice Sets the stargate token\\n    /// @param newStargateToken Address of the stargate token   \\n    function setStargateToken(address newStargateToken) external onlyAdmin {\\n        stargateToken = newStargateToken;\\n    }\\n\\n    /// @notice Sets the bot messenger\\n    /// @param newBotMessenger Address of the bot messenger (backend server)   \\n    function setBotMessenger(address newBotMessenger) external onlyAdmin {\\n        require(newBotMessenger != address(0), \\\"Bridge: new bot messenger can not have a zero address!\\\");\\n        botMessenger = newBotMessenger;\\n    }\\n\\n    /// @notice Lock tokens\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param sender Owner of the locked tokens\\n    /// @param token Address of the locked token\\n    /// @param tokenId ID of the locked ERC721 or ERC1155 token, 0 otherwise\\n    /// @param amount An amount of tokens to lock\\n    function processAsset(\\n        Assets assetType,\\n        address sender,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        if(assetType == Assets.Native){\\n            require(msg.value >= amount, \\\"Bridge: wrong native tokens amount\\\");\\n            return;\\n        }\\n        if(assetType == Assets.ERC20){\\n            IWrappedERC20(token).safeTransferFrom(sender, address(this), amount);\\n            return;\\n        }\\n        if(assetType == Assets.ERC721){\\n            IWrappedERC721(token).safeTransferFrom(sender, address(this), tokenId);\\n            return;\\n        }\\n        if(assetType == Assets.ERC1155){\\n            IWrappedERC1155(token).safeTransferFrom(sender, address(this), tokenId, amount, bytes(\\\"iamtoken\\\"));   \\n            return;\\n        }\\n        revert(\\\"Bridge: wrong asset\\\");\\n    }\\n\\n    /// @notice Burn tokens\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param sender Owner of thetokens\\n    /// @param token Address of the token\\n    /// @param tokenId ID of the ERC721 or ERC1155 token, 0 otherwise\\n    /// @param amount An amount of tokens to burn\\n    function discardAsset(\\n        Assets assetType,\\n        address sender,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        if(assetType == Assets.ERC20){\\n            IWrappedERC20(token).burn(sender, amount);\\n            return;\\n        }\\n        if(assetType == Assets.ERC721){\\n            require(\\n                IWrappedERC721(token).ownerOf(tokenId) == msg.sender,\\n                \\\"Bridge: cannot burn ERC721, msg.sender not owner\\\"\\n            );\\n            IWrappedERC721(token).burn(tokenId);\\n            return;\\n        }\\n        if(assetType == Assets.ERC1155){\\n            IWrappedERC1155(token).burn(sender, tokenId, amount);   \\n            return;\\n        }\\n        revert(\\\"Bridge: wrong asset\\\");\\n    }\\n\\n    /// @notice Mint wrapped tokens\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param sender receiver of the minted tokens\\n    /// @param token Address of the wrapped token\\n    /// @param tokenId ID of the wrapped ERC721 or ERC1155 token, 0 otherwise\\n    /// @param amount An amount of tokens to mint\\n    function mintAsset(\\n        Assets assetType,\\n        address sender,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        if(assetType == Assets.ERC20){\\n            IWrappedERC20(token).mint(sender, amount);\\n            return;\\n        }\\n        if(assetType == Assets.ERC721){\\n            IWrappedERC721(token).mint(sender, tokenId);\\n            return;\\n        }\\n        if(assetType == Assets.ERC1155){\\n            IWrappedERC1155(token).mint(sender, tokenId, amount);   \\n            return;\\n        }\\n        revert(\\\"Bridge: wrong asset\\\");\\n    }\\n\\n    /// @notice Transfers locked token back to it's owner\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param sender Owner of the locked tokens\\n    /// @param token Address of the locked token\\n    /// @param tokenId ID of the locked ERC721 or ERC1155 token, 0 otherwise\\n    /// @param amount An amount of tokens to unlock\\n    function unlockAsset(\\n        Assets assetType,\\n        address sender,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        if(assetType == Assets.Native){\\n        // Check if there is enough native tokens on the bridge (no fees)\\n            require(\\n                address(this).balance >= amount,\\n                \\\"Bridge: not enough native tokens on the bridge balance!\\\"\\n            );\\n            (bool success, ) = sender.call{ value: amount }(\\\"\\\");\\n            require(success, \\\"Bridge: native tokens unlock failed!\\\");\\n            return;\\n        }\\n        if(assetType == Assets.ERC20){\\n        // Check if there is enough custom tokens on the bridge (no fees)\\n            require(\\n                IWrappedERC20(token).balanceOf(address(this)) >= amount,\\n                \\\"Bridge: not enough ERC20 tokens on the bridge balance!\\\"\\n            );\\n            IWrappedERC20(token).safeTransfer(sender, amount);\\n            return;\\n        }\\n        if(assetType == Assets.ERC721){\\n        // Check if bridge owns the token\\n            require(\\n                IWrappedERC721(token).ownerOf(tokenId) == address(this),\\n                \\\"Bridge: bridge doesn't own token with this ID!\\\"\\n            );\\n            IWrappedERC721(token).safeTransferFrom(address(this),sender, tokenId);\\n            return;\\n        }\\n        if(assetType == Assets.ERC1155){\\n        // Check if there is enough custom tokens on the bridge (no fees)\\n            require(\\n                IWrappedERC1155(token).balanceOf(address(this), tokenId) > 0,\\n                \\\"Bridge: not enough ERC1155 tokens on the bridge balance!\\\"\\n            );\\n            IWrappedERC1155(token).safeTransferFrom(address(this), sender, tokenId, amount, bytes(\\\"iamtoken\\\"));   \\n            return;\\n        }\\n        revert(\\\"Bridge: wrong asset\\\");\\n    }\\n    /// @notice Calculates a fee for bridge operations with ERC20 and native tokens\\n    /// @param amount An amount of TT tokens that were sent\\n    /// @param stargateAmountForOneUsd Stargate tokens (ST) amount for one USD\\n    /// @param transferedTokensAmountForOneUsd TT tokens amount for one USD\\n    /// @param payFeesWithST true if user choose to pay fees with stargate tokens\\n    /// @return The fee amount in ST or TT depending on user's preferences\\n    function calcFeeScaled(\\n        uint256 amount,\\n        uint256 stargateAmountForOneUsd,\\n        uint256 transferedTokensAmountForOneUsd,\\n        bool payFeesWithST\\n    ) public pure returns(uint256) {\\n        uint256 result;\\n\\n        if(payFeesWithST) {\\n            //TT * fee rate => USD\\n            result = amount * ERC20_ST_FEE_RATE / transferedTokensAmountForOneUsd;\\n            result = result > MIN_ERC20_ST_FEE_USD ? result : MIN_ERC20_ST_FEE_USD;\\n            result = result < MAX_ERC20_ST_FEE_USD ? result : MAX_ERC20_ST_FEE_USD;\\n            //USD => ST\\n            result = result * stargateAmountForOneUsd / PERCENT_DENOMINATOR;\\n        }\\n        else if(transferedTokensAmountForOneUsd == 0) {\\n            result = amount * ERC20_TT_FEE_RATE / PERCENT_DENOMINATOR;\\n        } else {\\n            //TT * fee rate => USD\\n            result = amount * ERC20_TT_FEE_RATE / transferedTokensAmountForOneUsd;\\n            result = result > MIN_ERC20_TT_FEE_USD ? result : MIN_ERC20_TT_FEE_USD;\\n            result = result < MAX_ERC20_TT_FEE_USD ? result : MAX_ERC20_TT_FEE_USD;\\n            //USD => TT\\n            result = result * transferedTokensAmountForOneUsd / PERCENT_DENOMINATOR;\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Calculates a fee for bridge operations with ERC721 and ERC1155 tokens\\n    /// @param amount An amount of tokens that were sent (always 1 if ERC721)\\n    /// @param stargateAmountForOneUsd Stargate tokens (ST) amount for one USD\\n    /// @param payFeesWithST true if user choose to pay fees with stargate tokens\\n    /// @return The fee amount in ST or USD depending on user's preferences\\n    function calcFeeFixed(\\n        uint256 amount,\\n        uint256 stargateAmountForOneUsd,\\n        bool payFeesWithST\\n    ) public view returns(uint256) {\\n        uint256 result;\\n        if(payFeesWithST) {\\n            result = amount * (stargateAmountForOneUsd * ERC721_1155_ST_FEE_USD);\\n            result = result / PERCENT_DENOMINATOR;\\n        }\\n        else {\\n            result = amount * (10 ** IWrappedERC20(stablecoin).decimals()) * ERC721_1155_FEE_USD;\\n            result = result / PERCENT_DENOMINATOR;\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Transfer fees from user's wallet to contract address\\n    /// @param sender user's address\\n    /// @param token address of token in which fees are paid\\n    /// @param feeAmount fee amount\\n    function payFees(address sender, address token, uint256 feeAmount) internal {\\n        // lazy skip if fee tokens aren't set or amount is zero (useful in case of USDT)\\n        if(token == address(0) || feeAmount == 0)\\n            return;\\n        tokenFees[token] += feeAmount;\\n        IWrappedERC20(token).safeTransferFrom(sender, address(this), feeAmount);\\n    }\\n\\n    /// @notice Withdraws fees accumulated from a specific token operations\\n    /// @param token The address of the token which transfers collected fees\\n    /// @param amount The amount of fees from a single token to be withdrawn\\n    function withdraw(address token, uint256 amount) external nonReentrant onlyAdmin {\\n        require(tokenFees[token] != 0, \\\"Bridge: no fees were collected for this token!\\\");\\n        require(tokenFees[token] >= amount, \\\"Bridge: amount of fees to withdraw is too large!\\\");\\n        \\n        tokenFees[token] -= amount;\\n        if(token == address(0)){\\n            (bool success, ) = msg.sender.call{ value: amount }(\\\"\\\");\\n            require(success, \\\"Bridge: native tokens withdraw failed!\\\");\\n        } else\\n            IWrappedERC20(token).safeTransfer(msg.sender, amount);\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    /// @notice Adds a chain supported by the bridge\\n    /// @param newChain The name of the chain\\n    function setSupportedChain(string memory newChain) external onlyAdmin {\\n        supportedChains[newChain] = true;\\n        emit SetNewChain(newChain);\\n    }\\n\\n    /// @notice Removes a chain supported by the bridge\\n    /// @param oldChain The name of the chain\\n    function removeSupportedChain(string memory oldChain) external onlyAdmin {\\n        supportedChains[oldChain] = false;\\n        emit RemoveChain(oldChain);\\n    }\\n}\\n\",\"keccak256\":\"0x472fe02107e0543045f6326f2c4e761fb9f82aa19f2554b2a723103f2dec62fb\",\"license\":\"MIT\"},\"contracts/base/EIP712Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IBridge.sol\\\";\\n\\nabstract contract EIP712Utils is IBridge {\\n    bytes32 constant PERMIT_TYPEHASH = keccak256(\\n        \\\"Permit(address receiver,uint256 amount,address token,uint256 tokenId,string chain,uint256 nonce)\\\"\\n    );\\n    bytes32 constant VERIFYPRICE_TYPEHASH = keccak256(\\n        \\\"VerifyPrice(uint256 stargateAmountForOneUsd,uint256 transferedTokensAmountForOneUsd,address token,uint256 nonce)\\\"\\n    );\\n    /// @dev Generates the digest that is used in signature verification\\n    /// @param typeHash abi encoded type hash digest\\n    function getPermitDigest(bytes32 typeHash) internal view returns (bytes32) {\\n        bytes32 domainSeparator = getDomainSeparator(\\\"1\\\", block.chainid, address(this));\\n        bytes32 permitDigest = keccak256(\\n            abi.encodePacked(\\n                uint16(0x1901),\\n                domainSeparator,\\n                typeHash\\n            )\\n        );\\n        return permitDigest;\\n    }\\n\\n    /// @dev Generates domain separator\\n    /// @dev Used to generate permit digest afterwards\\n    /// @param version The version of separator\\n    /// @param chainId The ID of the current chain\\n    /// @param verifyingAddress The address of the contract that will verify the signature\\n    function getDomainSeparator(\\n        string memory version,\\n        uint256 chainId, \\n        address verifyingAddress\\n    ) internal pure returns (bytes32) {\\n            \\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingAddress)\\\"\\n                ),\\n                keccak256(bytes(\\\"StargateBridge\\\")),\\n                // Version\\n                keccak256(bytes(version)),\\n                // ChainID\\n                chainId,\\n                // Verifying contract\\n                verifyingAddress\\n            ) \\n        );   \\n    }\\n\\n    /// @dev Generates the type hash for verify price digest\\n    /// @param params sourceBridgeParams structure (see definition in IBridge.sol)\\n    function getVerifyPriceTypeHash(sourceBridgeParams calldata params) internal pure returns (bytes32) {\\n        bytes32 permitHash;\\n        permitHash = keccak256(\\n            abi.encode(\\n                VERIFYPRICE_TYPEHASH,\\n                params.stargateAmountForOneUsd,\\n                params.transferedTokensAmountForOneUsd,\\n                params.token,\\n                params.nonce\\n            )\\n        );\\n        return permitHash;\\n    }\\n    /// @dev Generates the type hash for permit digest\\n    /// @param params targetBridgeParams structure (see definition in IBridge.sol)\\n    /// @param chain If not price verification (unlock or mint) we check chain\\n    function getPermitTypeHash(\\n        address receiver,\\n        targetBridgeParams calldata params,\\n        string memory chain\\n    ) internal pure returns (bytes32) {\\n        bytes32 permitHash;\\n        permitHash = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                receiver,\\n                params.amount,\\n                params.token,\\n                params.tokenId,\\n                chain,\\n                params.nonce\\n            )\\n        );\\n        return permitHash;\\n    }\\n}\\n\\n\",\"keccak256\":\"0xdca6437459c8229845aaaaacc793b3967e2d193d1f4b6658f64cd7f3952e24c2\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title An interface for a bridge contract\\n/// @dev Declares default methods of a bridge contract\\ninterface IBridge {\\n\\n    /**\\n     * In case if tokens were transfered from chainA to chainB\\n     * chainA is the source chain\\n     * chainB is the target chain\\n     * If case if then tokens were transfered back from chainB to chainA\\n     * chainA is still the source chain\\n     * chainB is still the target chain\\n     * (in comments below)\\n     */\\n\\n    /// @notice structure that passed to the contract during it's operations with tokens on a source chain\\n    /// @param amount The amount of tokens to lock\\n    /// @param token Token address (address(0) if native)\\n    /// @param tokenId Token ID in case of operations with ERC721 or ERC1155, must be set to 0 otherwise\\n    /// @param receiver Receiver address\\n    /// @param targetChain The name of the target chain\\n    /// @param stargateAmountForOneUsd Stargate tokens (ST) amount for one USD (set to 0 if not needed)\\n    /// @param transferedTokensAmountForOneUsd TT tokens amount for one USD (set to 0 if not needed)\\n    /// @param payFeesWithST true if user choose to pay fees with stargate tokens (false if not needed)\\n    /// @param nonce Prevent replay attacks\\n    /// @param v Last byte of the signed PERMIT_DIGEST\\n    /// @param r First 32 bytes of the signed PERMIT_DIGEST\\n    /// @param v 32-64 bytes of the signed PERMIT_DIGEST\\n    struct sourceBridgeParams {\\n        uint256 amount;\\n        address token;\\n        uint256 tokenId;\\n        string receiver;\\n        string targetChain;\\n        uint256 stargateAmountForOneUsd;\\n        uint256 transferedTokensAmountForOneUsd;\\n        bool payFeesWithST;\\n        uint256 nonce;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n    /// @notice structure that passed to the contract during it's operations with tokens on a target chain\\n    /// @param amount The amount of tokens to lock\\n    /// @param token Token address (address(0) if native)\\n    /// @param tokenId Token ID in case of operations with ERC721 or ERC1155, must be set to 0 otherwise\\n    /// @param nonce Prevent replay attacks\\n    /// @param v Last byte of the signed PERMIT_DIGEST\\n    /// @param r First 32 bytes of the signed PERMIT_DIGEST\\n    /// @param v 32-64 bytes of the signed PERMIT_DIGEST\\n    struct targetBridgeParams {\\n        uint256 amount;\\n        address token;\\n        uint256 tokenId;\\n        uint256 nonce;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// @notice asset types 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    enum Assets {\\n        Native,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    /// @notice Locks tokens if the user is permitted to lock\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param params BridgeParams structure (see definition in IBridge.sol)\\n    /// @return True if tokens were locked successfully\\n    function lockWithPermit(Assets assetType, sourceBridgeParams calldata params)\\n        external payable returns(bool);\\n\\n    /// @notice Burn tokens if the user is permitted to burn\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param params BridgeParams structure (see definition in IBridge.sol)\\n    /// @return True if tokens were burned successfully\\n    function burnWithPermit(Assets assetType, sourceBridgeParams calldata params)\\n        external returns(bool);\\n    \\n    /// @notice Mint tokens if the user is permitted to mint\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param params BridgeParams structure (see definition in IBridge.sol)\\n    /// @return True if tokens were minted successfully\\n    function mintWithPermit(Assets assetType, targetBridgeParams calldata params)\\n        external returns(bool);\\n    \\n    /// @notice Unlocks tokens if the user is permitted to unlock\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param params BridgeParams structure (see definition in IBridge.sol)\\n    /// @return True if tokens were unlocked successfully\\n    function unlockWithPermit(Assets assetType, targetBridgeParams calldata params)\\n        external returns(bool);\\n\\n    /// @notice Indicates that tokens were locked in the source chain\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param sender The sender of the locking transaction\\n    /// @param receiver The receiver of wrapped tokens\\n    /// @param amount The amount of tokens to lock\\n    /// @param token The address of token to lock\\n    /// @param tokenId The ID of token to lock (0 if fungible tokens)\\n    /// @param targetChain The name of the target chain\\n    event Lock(\\n        Assets assetType,\\n        address indexed sender,\\n        string receiver,\\n        uint256 amount,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        string targetChain\\n    );\\n    /// @notice Indicates that tokens were burnt in the target chain\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param sender The sender of the burning transaction\\n    /// @param receiver The receiver of the unlocked tokens\\n    /// @param amount The amount of tokens to burn\\n    /// @param token The address of token to burn\\n    /// @param tokenId The ID of token to burn (0 if fungible tokens)\\n    /// @param targetChain The name of the target chain\\n    event Burn(\\n        Assets assetType,\\n        address indexed sender,\\n        string receiver,\\n        uint256 amount,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        string targetChain\\n    );\\n    /// @notice Indicates that tokens were minted by permitted user\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param sender The sender of the minting transaction\\n    /// @param receiver The receiver of tokens\\n    /// @param amount The amount of tokens to mint\\n    /// @param token The address of token to mint\\n    /// @param tokenId The ID of token to mint (0 if fungible tokens)\\n    /// @param targetChain The name of the target chain\\n    event Mint(\\n        Assets assetType,\\n        address indexed sender,\\n        address receiver,\\n        uint256 amount,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        string targetChain\\n    );\\n    /// @notice Indicates that tokens were unlocked in the source chain\\n    /// @param assetType 0-native, 1-ERC20, 2-ERC721, 3-ERC1155\\n    /// @param sender The sender of the unlocking transaction\\n    /// @param receiver The receiver of the unlocked tokens\\n    /// @param amount The amount of tokens to unlock\\n    /// @param token The address of the token to unlock\\n    /// @param tokenId The ID of the token to unlock(0 if fungible tokens)\\n    /// @param targetChain The name of the target chain\\n    event Unlock(\\n        Assets assetType,\\n        address indexed sender,\\n        address receiver,\\n        uint256 amount,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        string targetChain\\n    );\\n    /// @notice Indicates that token fees were withdrawn\\n    /// @param receiver Address of the wallet in the source chain\\n    /// @param amount The amount of fees from a single token to be withdrawn\\n    event Withdraw(\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    /// @notice Indicates that the a admin was set\\n    /// @param newAdmin The address of a new admin\\n    event SetAdmin(\\n        address indexed newAdmin\\n    );\\n\\n    /// @notice Indicates that a new fee rate was set\\n    /// @param newFeeRateBp A new fee rate in basis points\\n    event SetFeeRate(\\n        uint256 indexed newFeeRateBp\\n    );\\n\\n    /// @notice Indicates that a new supported chain was set\\n    /// @param newChain The name of a new supported chain\\n    event SetNewChain(\\n        string newChain\\n    );\\n\\n    /// @notice Indicates that a chain is no longer supported\\n    /// @param oldChain The name of a previously supported chain\\n    event RemoveChain(\\n        string oldChain\\n    );\\n}\\n\",\"keccak256\":\"0xa5ee224521b38949db4b3af13d2112fda164eaf65f3c1d0be127638e8eec8f41\",\"license\":\"MIT\"},\"contracts/interfaces/IWrappedERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\n/// @title An interface for a custom ERC1155 contract used in the bridge\\ninterface IWrappedERC1155 is IERC1155MetadataURI {\\n\\n    /// @notice Returns the URI of tokens\\n    /// @return The URI of tokens\\n    function tokensUri() external view returns(string memory);\\n\\n    /// @notice Returns the address of the bridge contract\\n    /// @return The address of the bridge contract\\n    function bridge() external view returns(address);\\n\\n    /// @notice Creates amount tokens of specific type and assigns them to the user\\n    /// @param to The receiver of tokens\\n    /// @param id The ID of the token type\\n    /// @param amount The amount of tokens to be minted\\n    function mint(address to, uint256 id, uint256 amount) external;\\n\\n    /// @notice Creates a batch (batches) of tokens of specific type (types) and assigns them to the user\\n    /// @param to The receiver of tokens\\n    /// @param ids The array of token types IDs\\n    /// @param amounts The array of amount of tokens of each token type\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts) external;\\n\\n    /// @notice Destroys tokens of specific token type\\n    /// @param from The account holding tokens to be burnt\\n    /// @param id The token type ID\\n    /// @param amount The amount of tokens to be burnt\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /// @notice Destroys a batch (batches) of tokens of specific type (types)\\n    /// @param from The account holding tokens to be burnt\\n    /// @param ids The array of token type IDs\\n    /// @param amounts The array of amounts of tokens to be burnt\\n    function burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) external;\\n\\n    /// @notice Is emitted on every mint of the token\\n    event Mint(address indexed to, uint256 indexed tokenId, uint256 indexed amount);\\n\\n    /// @notice Is emitted on every mint of batch of tokens\\n    event MintBatch(address indexed to, uint256[] indexed ids, uint256[] indexed amounts);\\n    \\n    /// @notice Is emitted on every burn of the token\\n    event Burn(address indexed from, uint256 indexed id, uint256 indexed amount);\\n\\n    /// @notice Is emitted on everu burn of the batch of tokens\\n    event BurnBatch(address indexed from, uint256[] indexed ids, uint256[] indexed amounts);\\n}\\n\\n\",\"keccak256\":\"0x72d681ea9b5e2332c24efd4cfd30a9381e7b32c813a13a8fb52af3315eb00420\",\"license\":\"MIT\"},\"contracts/interfaces/IWrappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title An interface for a custom ERC20 contract used in the bridge\\ninterface IWrappedERC20 is IERC20Upgradeable {\\n\\n    /// @notice Returns the name of the token\\n    /// @return The name of the token\\n    function name() external view returns(string memory);\\n\\n    /// @notice Returns the symbol of the token\\n    /// @return The symbol of the token\\n    function symbol() external view returns(string memory);\\n\\n    /// @notice Returns number of decimals of the token\\n    /// @return The number of decimals of the token\\n    function decimals() external view returns(uint8);\\n\\n    /// @notice Returns the address of the bridge contract\\n    /// @return The address of the bridge contract\\n    function bridge() external view returns(address);\\n\\n    /// @notice Creates tokens and assigns them to account, increasing the total supply.\\n    /// @param to The receiver of tokens\\n    /// @param amount The amount of tokens to mint\\n    function mint(address to, uint256 amount) external;\\n\\n    /// @notice Destroys tokens from account, reducing the total supply.\\n    /// @param from The address holding the tokens\\n    /// @param amount The amount of tokens to burn\\n    function burn(address from, uint256 amount) external;\\n\\n    /// @notice Is emitted on every mint of the token\\n    event Mint(address indexed account, uint256 amount);\\n    \\n    /// @notice Is emitted on every burn of the token\\n    event Burn(address indexed account, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfc449ad876abb5022ca2c4b71032dbc8e992858c121c80564ac1584590564c73\",\"license\":\"MIT\"},\"contracts/interfaces/IWrappedERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\n/// @title An interface for a custom ERC721 contract used in the bridge\\ninterface IWrappedERC721 is IERC721Metadata {\\n\\n    /// @notice Returns the name of the token\\n    /// @return The name of the token\\n    function name() external view returns(string memory);\\n\\n    /// @notice Returns the symbol of the token\\n    /// @return The symbol of the token\\n    function symbol() external view returns(string memory);\\n\\n    /// @notice Returns the address of the bridge contract\\n    /// @return The address of the bridge contract\\n    function bridge() external view returns(address);\\n\\n    /// @notice Creates tokens and assigns them to account\\n    /// @param to The receiver of tokens\\n    /// @param tokenId The ID of minted token\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Destroys a token with a given ID\\n    /// @param tokenId The ID of the token to destroy\\n    function burn(uint256 tokenId) external;\\n\\n    /// @notice Is emitted on every mint of the token\\n    event Mint(address indexed to, uint256 indexed tokenId);\\n    \\n    /// @notice Is emitted on every burn of the token\\n    event Burn(uint indexed tokenId);\\n}\\n\\n\",\"keccak256\":\"0x7ad5ba5a9c26d4e4e254201aedd3c6c6f316fb3b5b10b1a557af9e8256d7bd90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b26806100206000396000f3fe6080604052600436106101e35760003560e01c806391d1485411610102578063d547741f11610095578063f17898f711610064578063f17898f71461060c578063f23a6e611461062d578063f3fef3a31461065a578063ff03c8c41461067a57600080fd5b8063d547741f1461058b578063d9a46fbb146105ab578063e088bfc0146105cb578063e9cbd822146105eb57600080fd5b8063ace05f98116100d1578063ace05f9814610509578063ae9faeb214610529578063c763e5a114610549578063d24f62391461056b57600080fd5b806391d14854146104a1578063958b7b4e146104c157806398daf66d146104e1578063a217fddf146104f457600080fd5b80634571e3a61161017a57806363d5079b1161014957806363d5079b146103f15780636c30aaa214610411578063704b6c021461044d57806379968bbc1461046d57600080fd5b80634571e3a61461037a578063465600231461039a57806352631ab4146103ba5780635bd80ca6146103d157600080fd5b80632f2ff15d116101b65780632f2ff15d146102d157806331161e0b146102f357806336568abe1461032c57806339e16d641461034c57600080fd5b806301ffc9a7146101e8578063141a468c1461021d578063150b7a021461024e578063248a9ca314610293575b600080fd5b3480156101f457600080fd5b5061020861020336600461301f565b61069a565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610208610238366004613049565b61012f6020526000908152604090205460ff1681565b34801561025a57600080fd5b5061027a6102693660046130c0565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610214565b34801561029f57600080fd5b506102c36102ae366004613049565b60009081526065602052604090206001015490565b604051908152602001610214565b3480156102dd57600080fd5b506102f16102ec366004613133565b6106d1565b005b3480156102ff57600080fd5b5061013054610314906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b34801561033857600080fd5b506102f1610347366004613133565b6106fb565b34801561035857600080fd5b506102c3610367366004613163565b61012e6020526000908152604090205481565b34801561038657600080fd5b506102f1610395366004613223565b61077e565b3480156103a657600080fd5b506102f16103b5366004613285565b6109f3565b3480156103c657600080fd5b506102c36101335481565b3480156103dd57600080fd5b506102086103ec3660046132ce565b610a86565b3480156103fd57600080fd5b506102f161040c366004613285565b610bf2565b34801561041d57600080fd5b5061020861042c366004613285565b805160208183018101805161012d8252928201919093012091525460ff1681565b34801561045957600080fd5b506102f1610468366004613163565b610c7a565b34801561047957600080fd5b506102c37f401e9638419b634c602998da0d7966f95cf0b3bc314e071b21ba0a541b989e5d81565b3480156104ad57600080fd5b506102086104bc366004613133565b610d50565b3480156104cd57600080fd5b506102f16104dc366004613163565b610d7b565b6102086104ef36600461330e565b610e3a565b34801561050057600080fd5b506102c3600081565b34801561051557600080fd5b506102f1610524366004613163565b611291565b34801561053557600080fd5b506102c3610544366004613367565b6112db565b34801561055557600080fd5b5061055e6113c3565b6040516102149190613400565b34801561057757600080fd5b506102086105863660046132ce565b611452565b34801561059757600080fd5b506102f16105a6366004613133565b61158b565b3480156105b757600080fd5b506102086105c636600461330e565b6115b0565b3480156105d757600080fd5b506102f16105e6366004613163565b6118aa565b3480156105f757600080fd5b5061013154610314906001600160a01b031681565b34801561061857600080fd5b5061013254610314906001600160a01b031681565b34801561063957600080fd5b5061027a610648366004613413565b63f23a6e6160e01b9695505050505050565b34801561066657600080fd5b506102f161067536600461348f565b6118f4565b34801561068657600080fd5b506102c36106953660046134bb565b611b5e565b60006001600160e01b03198216637965db0b60e01b14806106cb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152606560205260409020600101546106ec81611c40565b6106f68383611c4d565b505050565b6001600160a01b03811633146107705760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61077a8282611cd3565b5050565b600054610100900460ff161580801561079e5750600054600160ff909116105b806107b85750303b1580156107b8575060005460ff166001145b61081b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610767565b6000805460ff19166001179055801561083e576000805461ff0019166101001790555b6001600160a01b0384166108b35760405162461bcd60e51b815260206004820152603660248201527f4272696467653a2064656661756c7420626f74206d657373656e6765722063616044820152756e206e6f74206265207a65726f20616464726573732160501b6064820152608401610767565b6001600160a01b03831661091d5760405162461bcd60e51b815260206004820152602b60248201527f4272696467653a20737461626c65636f696e2063616e206e6f74206265207a6560448201526a726f20616464726573732160a81b6064820152608401610767565b610928600033611d3a565b61013080546001600160a01b038087166001600160a01b031992831617909255610131805492861692909116919091179055815161096e90610134906020850190612f86565b50610130546109a7907f401e9638419b634c602998da0d7966f95cf0b3bc314e071b21ba0a541b989e5d906001600160a01b0316611d3a565b80156109ed576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6109fe600033610d50565b610a1a5760405162461bcd60e51b8152600401610767906134f4565b600061012d82604051610a2d9190613537565b908152604051908190036020018120805492151560ff19909316929092179091557f10af96e721b3a4e477e01fd9fb9464be7c57b780da59ea18601c87fbf1437ac190610a7b908390613400565b60405180910390a150565b6000610a90611d44565b60003390506000610b2d82856101348054610aaa90613553565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad690613553565b8015610b235780601f10610af857610100808354040283529160200191610b23565b820191906000526020600020905b815481529060010190602001808311610b0657829003601f168201915b5050505050611d9e565b9050610b57816060860135610b4860a088016080890161359d565b8760a001358860c00135611e17565b610b788583610b6c6040880160208901613163565b6040880135883561205f565b60408401803590610b8c9060208701613163565b6001600160a01b0316836001600160a01b03167fbafa86118be622f121710cad82878e2e567d1cdf9644c3940170b20d7f12bf8588868960000135610134604051610bda94939291906135f2565b60405180910390a46001925050506106cb6001609755565b610bfd600033610d50565b610c195760405162461bcd60e51b8152600401610767906134f4565b600161012d82604051610c2c9190613537565b908152604051908190036020018120805492151560ff19909316929092179091557faf11741ff825b25bdae46209ed372070c66ffe89b1f4b4ae5f9edcea8e333d9490610a7b908390613400565b610c85600033610d50565b610ca15760405162461bcd60e51b8152600401610767906134f4565b6001600160a01b038116610d0e5760405162461bcd60e51b815260206004820152602e60248201527f4272696467653a206e65772061646d696e2063616e206e6f742068617665206160448201526d207a65726f20616464726573732160901b6064820152608401610767565b610d196000826106d1565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d86600033610d50565b610da25760405162461bcd60e51b8152600401610767906134f4565b6001600160a01b038116610e175760405162461bcd60e51b815260206004820152603660248201527f4272696467653a206e657720626f74206d657373656e6765722063616e206e6f6044820152757420686176652061207a65726f20616464726573732160501b6064820152608401610767565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e4960808301836136c0565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161012d9250610e8f91508390613537565b9081526040519081900360200190205460ff16610ebe5760405162461bcd60e51b815260040161076790613707565b610ec6611d44565b6000846003811115610eda57610eda6135ba565b14610f43573415610f435760405162461bcd60e51b815260206004820152602d60248201527f4272696467653a2077726f6e672061737365742c206f6e6c79206e617469766560448201526c206c6f636b2070617961626c6560981b6064820152608401610767565b336000610f4f856125cd565b9050610f7e81610100870135610f6d61014089016101208a0161359d565b886101400135896101600135611e17565b600080876003811115610f9357610f936135ba565b1480610fb057506001876003811115610fae57610fae6135ba565b145b15610fdc57610fd5863560a088013560c08901356105446101008b0160e08c0161374a565b9050610ffa565b610ff7863560a08801356106956101008a0160e08b0161374a565b90505b61100b610100870160e0880161374a565b1561102957610132546110299084906001600160a01b03168361265d565b61103a610100870160e0880161374a565b15801561105857506001876003811115611056576110566135ba565b145b1561107757611077836110716040890160208a01613163565b8361265d565b611088610100870160e0880161374a565b1580156110a6575060008760038111156110a4576110a46135ba565b145b15611176576110b681873561377d565b34101561112b5760405162461bcd60e51b815260206004820152603d60248201527f4272696467653a206e6f7420656e6f756768206e617469766520746f6b656e7360448201527f20776572652073656e7420746f20636f766572207468652066656573210000006064820152608401610767565b8061012e600061114160408a0160208b01613163565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254611170919061377d565b90915550505b611187610100870160e0880161374a565b1580156111c0575060028760038111156111a3576111a36135ba565b14806111c0575060038760038111156111be576111be6135ba565b145b156111de57610131546111de9084906001600160a01b03168361265d565b6111ff87846111f360408a0160208b01613163565b60408a01358a356126bf565b604086018035906112139060208901613163565b6001600160a01b039081169085167f25c221ba91ec7f6f8d3ac9adca71e94956c4d2b21e8432340d4cfebb7288c3498a61125060608c018c6136c0565b8c3561125f60808f018f6136c0565b604051611271969594939291906137be565b60405180910390a46001945050505061128a6001609755565b5092915050565b61129c600033610d50565b6112b85760405162461bcd60e51b8152600401610767906134f4565b61013280546001600160a01b0319166001600160a01b0392909216919091179055565b600080821561134557836112f060e188613805565b6112fa9190613824565b90506102ee811161130d576102ee61130f565b805b9050613a98811061132257613a98611324565b805b9050620186a06113348683613805565b61133e9190613824565b90506113b8565b8361135a57620186a061133461012c88613805565b8361136761012c88613805565b6113719190613824565b90506103e88111611384576103e8611386565b805b9050614e20811061139957614e2061139b565b805b9050620186a06113ab8583613805565b6113b59190613824565b90505b90505b949350505050565b61013480546113d190613553565b80601f01602080910402602001604051908101604052809291908181526020018280546113fd90613553565b801561144a5780601f1061141f5761010080835404028352916020019161144a565b820191906000526020600020905b81548152906001019060200180831161142d57829003601f168201915b505050505081565b600061145c611d44565b6000836003811115611470576114706135ba565b14156114d35760405162461bcd60e51b815260206004820152602c60248201527f4272696467653a2077726f6e672061737365742c2063616e2774206d696e742060448201526b3730ba34bb32903a37b5b2b760a11b6064820152608401610767565b600033905060006114ed82856101348054610aaa90613553565b9050611508816060860135610b4860a088016080890161359d565b611529858361151d6040880160208901613163565b60408801358835612822565b6040840180359061153d9060208701613163565b6001600160a01b0316836001600160a01b03167f9634234c639878ca546a1a53fcf4fc38bfa7bffb8f00e56e1c0ebed000c5731988868960000135610134604051610bda94939291906135f2565b6000828152606560205260409020600101546115a681611c40565b6106f68383611cd3565b60006115bf60808301836136c0565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161012d925061160591508390613537565b9081526040519081900360200190205460ff166116345760405162461bcd60e51b815260040161076790613707565b61163c611d44565b6000846003811115611650576116506135ba565b14156116b35760405162461bcd60e51b815260206004820152602c60248201527f4272696467653a2077726f6e672061737365742c2063616e2774206275726e2060448201526b3730ba34bb32903a37b5b2b760a11b6064820152608401610767565b3360006116bf856125cd565b90506116dd81610100870135610f6d61014089016101208a0161359d565b6000808760038111156116f2576116f26135ba565b148061170f5750600187600381111561170d5761170d6135ba565b145b1561173b57611734863560a088013560c08901356105446101008b0160e08c0161374a565b9050611759565b611756863560a08801356106956101008a0160e08b0161374a565b90505b61176a610100870160e0880161374a565b1561178857610132546117889084906001600160a01b03168361265d565b611799610100870160e0880161374a565b1580156117b7575060018760038111156117b5576117b56135ba565b145b156117d0576117d0836110716040890160208a01613163565b6117e1610100870160e0880161374a565b15801561181a575060028760038111156117fd576117fd6135ba565b148061181a57506003876003811115611818576118186135ba565b145b1561183857610131546118389084906001600160a01b03168361265d565b611859878461184d60408a0160208b01613163565b60408a01358a35612916565b6040860180359061186d9060208901613163565b6001600160a01b039081169085167fa3dc7d629c91651fb935be26cbf4f3193d14c6b7e286c96c7f79ad6bb2466e6f8a61125060608c018c6136c0565b6118b5600033610d50565b6118d15760405162461bcd60e51b8152600401610767906134f4565b61013180546001600160a01b0319166001600160a01b0392909216919091179055565b6118fc611d44565b611907600033610d50565b6119235760405162461bcd60e51b8152600401610767906134f4565b6001600160a01b038216600090815261012e60205260409020546119a05760405162461bcd60e51b815260206004820152602e60248201527f4272696467653a206e6f2066656573207765726520636f6c6c6563746564206660448201526d6f72207468697320746f6b656e2160901b6064820152608401610767565b6001600160a01b038216600090815261012e6020526040902054811115611a225760405162461bcd60e51b815260206004820152603060248201527f4272696467653a20616d6f756e74206f66206665657320746f2077697468647260448201526f617720697320746f6f206c617267652160801b6064820152608401610767565b6001600160a01b038216600090815261012e602052604081208054839290611a4b908490613846565b90915550506001600160a01b038216611b0b57604051600090339083908381818185875af1925050503d8060008114611aa0576040519150601f19603f3d011682016040523d82523d6000602084013e611aa5565b606091505b5050905080611b055760405162461bcd60e51b815260206004820152602660248201527f4272696467653a206e617469766520746f6b656e73207769746864726177206660448201526561696c65642160d01b6064820152608401610767565b50611b1f565b611b1f6001600160a01b0383163383612aeb565b60405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a261077a6001609755565b6000808215611b9357611b73614e2085613805565b611b7d9086613805565b9050611b8c620186a082613824565b90506113bb565b610131546040805163313ce56760e01b81529051617530926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015611bda57600080fd5b505afa158015611bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c12919061385d565b611c1d90600a61395e565b611c279087613805565b611c319190613805565b90506113b8620186a082613824565b611c4a8133612b4e565b50565b611c578282610d50565b61077a5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c8f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611cdd8282610d50565b1561077a5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61077a8282611c4d565b60026097541415611d975760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610767565b6002609755565b6000807f65d05d260bf47ac1aa6c5d8364046ce4173e0e5f127655749f9ae586ec4880f5858535611dd56040880160208901613163565b8760400135878960600135604051602001611df6979695949392919061396d565b60408051808303601f19018152919052805160209091012095945050505050565b600084815261012f602052604090205460ff1615611e825760405162461bcd60e51b815260206004820152602260248201527f4272696467653a207265717565737420616c72656164792070726f6365737365604482015261642160f01b6064820152608401610767565b6000611f748660408051808201825260018152603160f81b602080830191825283518085018552600e81526d537461726761746542726964676560901b908201529151902082517f31c569877b7458562e8ccbbd55ce7cacb56f44901719d688433e2a9a04877e65818401527f2c36991225d1a8da1611aee73594202fc2b7a578d8abf67221c3c385b89a16178185015260608101919091524660808201523060a0808301919091528351808303909101815260c08201845280519083012061190160f01b60e083015260e2820152610102808201949094528251808203909401845261012201909152815191012090565b6040805160008082526020820180845284905260ff88169282019290925260608101869052608081018590529192509060019060a0016020604051602081039080840390855afa158015611fcc573d6000803e3d6000fd5b5050604051601f190151610130549092506001600160a01b0380841691161490506120395760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20696e76616c6964207369676e6174757265210000000000006044820152606401610767565b505050600083815261012f60205260409020805460ff1916600117905550506101335550565b6000856003811115612073576120736135ba565b14156121a457804710156120ef5760405162461bcd60e51b815260206004820152603760248201527f4272696467653a206e6f7420656e6f756768206e617469766520746f6b656e7360448201527f206f6e20746865206272696467652062616c616e6365210000000000000000006064820152608401610767565b6000846001600160a01b03168260405160006040518083038185875af1925050503d806000811461213c576040519150601f19603f3d011682016040523d82523d6000602084013e612141565b606091505b505090508061219e5760405162461bcd60e51b8152602060048201526024808201527f4272696467653a206e617469766520746f6b656e7320756e6c6f636b206661696044820152636c65642160e01b6064820152608401610767565b506125c6565b60018560038111156121b8576121b86135ba565b14156122bd576040516370a0823160e01b815230600482015281906001600160a01b038516906370a082319060240160206040518083038186803b1580156121ff57600080fd5b505afa158015612213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223791906139c1565b10156122a45760405162461bcd60e51b815260206004820152603660248201527f4272696467653a206e6f7420656e6f75676820455243323020746f6b656e73206044820152756f6e20746865206272696467652062616c616e63652160501b6064820152608401610767565b6122b86001600160a01b0384168583612aeb565b6125c6565b60028560038111156122d1576122d16135ba565b141561242c576040516331a9108f60e11b81526004810183905230906001600160a01b03851690636352211e9060240160206040518083038186803b15801561231957600080fd5b505afa15801561232d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235191906139da565b6001600160a01b0316146123be5760405162461bcd60e51b815260206004820152602e60248201527f4272696467653a2062726964676520646f65736e2774206f776e20746f6b656e60448201526d207769746820746869732049442160901b6064820152608401610767565b604051632142170760e11b81523060048201526001600160a01b038581166024830152604482018490528416906342842e0e906064015b600060405180830381600087803b15801561240f57600080fd5b505af1158015612423573d6000803e3d6000fd5b505050506125c6565b6003856003811115612440576124406135ba565b141561258857604051627eeac760e11b8152306004820152602481018390526000906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561248d57600080fd5b505afa1580156124a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c591906139c1565b116125385760405162461bcd60e51b815260206004820152603860248201527f4272696467653a206e6f7420656e6f756768204552433131353520746f6b656e60448201527f73206f6e20746865206272696467652062616c616e63652100000000000000006064820152608401610767565b604080518082018252600881526734b0b6ba37b5b2b760c11b60208201529051637921219560e11b81526001600160a01b0385169163f242432a916123f5913091899188918891906004016139f7565b60405162461bcd60e51b8152602060048201526013602482015272109c9a5919d94e881ddc9bdb99c8185cdcd95d606a1b6044820152606401610767565b5050505050565b6000807f0c57230c111c08b3fb7d631c6ea9c697d84e44f91fb497de198e07f8c73a844960a084013560c085013561260b6040870160208801613163565b60408051602081019590955284019290925260608301526001600160a01b0316608082015261010084013560a082015260c00160408051601f1981840301815291905280516020909101209392505050565b6001600160a01b0382161580612671575080155b1561267b57505050565b6001600160a01b038216600090815261012e6020526040812080548392906126a490849061377d565b909155506106f690506001600160a01b038316843084612ba7565b60008560038111156126d3576126d36135ba565b141561273457803410156122b85760405162461bcd60e51b815260206004820152602260248201527f4272696467653a2077726f6e67206e617469766520746f6b656e7320616d6f756044820152611b9d60f21b6064820152608401610767565b6001856003811115612748576127486135ba565b1415612763576122b86001600160a01b038416853084612ba7565b6002856003811115612777576127776135ba565b14156127b857604051632142170760e11b81526001600160a01b038581166004830152306024830152604482018490528416906342842e0e906064016123f5565b60038560038111156127cc576127cc6135ba565b141561258857604080518082018252600881526734b0b6ba37b5b2b760c11b60208201529051637921219560e11b81526001600160a01b0385169163f242432a916123f5918891309188918891906004016139f7565b6001856003811115612836576128366135ba565b1415612871576040516340c10f1960e01b81526001600160a01b038581166004830152602482018390528416906340c10f19906044016123f5565b6002856003811115612885576128856135ba565b14156128c0576040516340c10f1960e01b81526001600160a01b038581166004830152602482018490528416906340c10f19906044016123f5565b60038560038111156128d4576128d46135ba565b141561258857604051630ab714fb60e11b81526001600160a01b038581166004830152602482018490526044820183905284169063156e29f6906064016123f5565b600185600381111561292a5761292a6135ba565b141561296557604051632770a7eb60e21b81526001600160a01b03858116600483015260248201839052841690639dc29fac906044016123f5565b6002856003811115612979576129796135ba565b1415612a95576040516331a9108f60e11b81526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b1580156129c157600080fd5b505afa1580156129d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f991906139da565b6001600160a01b031614612a685760405162461bcd60e51b815260206004820152603060248201527f4272696467653a2063616e6e6f74206275726e204552433732312c206d73672e60448201526f39b2b73232b9103737ba1037bbb732b960811b6064820152608401610767565b604051630852cd8d60e31b8152600481018390526001600160a01b038416906342966c68906024016123f5565b6003856003811115612aa957612aa96135ba565b141561258857604051637a94c56560e11b81526001600160a01b038581166004830152602482018490526044820183905284169063f5298aca906064016123f5565b6040516001600160a01b0383166024820152604481018290526106f690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bdf565b612b588282610d50565b61077a57612b6581612cb1565b612b70836020612cc3565b604051602001612b81929190613a31565b60408051601f198184030181529082905262461bcd60e51b825261076791600401613400565b6040516001600160a01b03808516602483015283166044820152606481018290526109ed9085906323b872dd60e01b90608401612b17565b6000612c34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e669092919063ffffffff16565b8051909150156106f65780806020019051810190612c529190613aa6565b6106f65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610767565b60606106cb6001600160a01b03831660145b60606000612cd2836002613805565b612cdd90600261377d565b67ffffffffffffffff811115612cf557612cf5613180565b6040519080825280601f01601f191660200182016040528015612d1f576020820181803683370190505b509050600360fc1b81600081518110612d3a57612d3a613ac3565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d6957612d69613ac3565b60200101906001600160f81b031916908160001a9053506000612d8d846002613805565b612d9890600161377d565b90505b6001811115612e10576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612dcc57612dcc613ac3565b1a60f81b828281518110612de257612de2613ac3565b60200101906001600160f81b031916908160001a90535060049490941c93612e0981613ad9565b9050612d9b565b508315612e5f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610767565b9392505050565b60606113bb848460008585600080866001600160a01b03168587604051612e8d9190613537565b60006040518083038185875af1925050503d8060008114612eca576040519150601f19603f3d011682016040523d82523d6000602084013e612ecf565b606091505b5091509150612ee087838387612eeb565b979650505050505050565b60608315612f57578251612f50576001600160a01b0385163b612f505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610767565b50816113bb565b6113bb8383815115612f6c5781518083602001fd5b8060405162461bcd60e51b81526004016107679190613400565b828054612f9290613553565b90600052602060002090601f016020900481019282612fb45760008555612ffa565b82601f10612fcd57805160ff1916838001178555612ffa565b82800160010185558215612ffa579182015b82811115612ffa578251825591602001919060010190612fdf565b5061300692915061300a565b5090565b5b80821115613006576000815560010161300b565b60006020828403121561303157600080fd5b81356001600160e01b031981168114612e5f57600080fd5b60006020828403121561305b57600080fd5b5035919050565b6001600160a01b0381168114611c4a57600080fd5b60008083601f84011261308957600080fd5b50813567ffffffffffffffff8111156130a157600080fd5b6020830191508360208285010111156130b957600080fd5b9250929050565b6000806000806000608086880312156130d857600080fd5b85356130e381613062565b945060208601356130f381613062565b935060408601359250606086013567ffffffffffffffff81111561311657600080fd5b61312288828901613077565b969995985093965092949392505050565b6000806040838503121561314657600080fd5b82359150602083013561315881613062565b809150509250929050565b60006020828403121561317557600080fd5b8135612e5f81613062565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126131a757600080fd5b813567ffffffffffffffff808211156131c2576131c2613180565b604051601f8301601f19908116603f011681019082821181831017156131ea576131ea613180565b8160405283815286602085880101111561320357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561323857600080fd5b833561324381613062565b9250602084013561325381613062565b9150604084013567ffffffffffffffff81111561326f57600080fd5b61327b86828701613196565b9150509250925092565b60006020828403121561329757600080fd5b813567ffffffffffffffff8111156132ae57600080fd5b6113bb84828501613196565b8035600481106132c957600080fd5b919050565b6000808284036101008112156132e357600080fd5b6132ec846132ba565b925060e0601f198201121561330057600080fd5b506020830190509250929050565b6000806040838503121561332157600080fd5b61332a836132ba565b9150602083013567ffffffffffffffff81111561334657600080fd5b8301610180818603121561315857600080fd5b8015158114611c4a57600080fd5b6000806000806080858703121561337d57600080fd5b843593506020850135925060408501359150606085013561339d81613359565b939692955090935050565b60005b838110156133c35781810151838201526020016133ab565b838111156109ed5750506000910152565b600081518084526133ec8160208601602086016133a8565b601f01601f19169290920160200192915050565b602081526000612e5f60208301846133d4565b60008060008060008060a0878903121561342c57600080fd5b863561343781613062565b9550602087013561344781613062565b94506040870135935060608701359250608087013567ffffffffffffffff81111561347157600080fd5b61347d89828a01613077565b979a9699509497509295939492505050565b600080604083850312156134a257600080fd5b82356134ad81613062565b946020939093013593505050565b6000806000606084860312156134d057600080fd5b833592506020840135915060408401356134e981613359565b809150509250925092565b60208082526023908201527f4272696467653a207468652063616c6c6572206973206e6f7420616e2061646d604082015262696e2160e81b606082015260800190565b600082516135498184602087016133a8565b9190910192915050565b600181811c9082168061356757607f821691505b6020821081141561358857634e487b7160e01b600052602260045260246000fd5b50919050565b60ff81168114611c4a57600080fd5b6000602082840312156135af57600080fd5b8135612e5f8161358e565b634e487b7160e01b600052602160045260246000fd5b600481106135ee57634e487b7160e01b600052602160045260246000fd5b9052565b6135fc81866135d0565b6000602060018060a01b03861681840152846040840152608060608401526000845481600182811c91508083168061363557607f831692505b85831081141561365357634e487b7160e01b85526022600452602485fd5b6080880183905260a088018180156136725760018114613683576136ae565b60ff198616825287820196506136ae565b60008b81526020902060005b868110156136a85781548482015290850190890161368f565b83019750505b50949c9b505050505050505050505050565b6000808335601e198436030181126136d757600080fd5b83018035915067ffffffffffffffff8211156136f257600080fd5b6020019150368190038213156130b957600080fd5b60208082526023908201527f4272696467653a2074686520636861696e206973206e6f7420737570706f727460408201526265642160e81b606082015260800190565b60006020828403121561375c57600080fd5b8135612e5f81613359565b634e487b7160e01b600052601160045260246000fd5b6000821982111561379057613790613767565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6137c881886135d0565b6080602082015260006137df608083018789613795565b85604084015282810360608401526137f8818587613795565b9998505050505050505050565b600081600019048311821515161561381f5761381f613767565b500290565b60008261384157634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561385857613858613767565b500390565b60006020828403121561386f57600080fd5b8151612e5f8161358e565b600181815b808511156138b557816000190482111561389b5761389b613767565b808516156138a857918102915b93841c939080029061387f565b509250929050565b6000826138cc575060016106cb565b816138d9575060006106cb565b81600181146138ef57600281146138f957613915565b60019150506106cb565b60ff84111561390a5761390a613767565b50506001821b6106cb565b5060208310610133831016604e8410600b8410161715613938575081810a6106cb565b613942838361387a565b806000190482111561395657613956613767565b029392505050565b6000612e5f60ff8416836138bd565b8781526001600160a01b03878116602083015260408201879052851660608201526080810184905260e060a082018190526000906139ad908301856133d4565b90508260c083015298975050505050505050565b6000602082840312156139d357600080fd5b5051919050565b6000602082840312156139ec57600080fd5b8151612e5f81613062565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ee0908301846133d4565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613a698160178501602088016133a8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613a9a8160288401602088016133a8565b01602801949350505050565b600060208284031215613ab857600080fd5b8151612e5f81613359565b634e487b7160e01b600052603260045260246000fd5b600081613ae857613ae8613767565b50600019019056fea2646970667358221220255c913bb98200e254d38cc95d7a5d66b76a8db59a95d6780f480903e539bfb164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c806391d1485411610102578063d547741f11610095578063f17898f711610064578063f17898f71461060c578063f23a6e611461062d578063f3fef3a31461065a578063ff03c8c41461067a57600080fd5b8063d547741f1461058b578063d9a46fbb146105ab578063e088bfc0146105cb578063e9cbd822146105eb57600080fd5b8063ace05f98116100d1578063ace05f9814610509578063ae9faeb214610529578063c763e5a114610549578063d24f62391461056b57600080fd5b806391d14854146104a1578063958b7b4e146104c157806398daf66d146104e1578063a217fddf146104f457600080fd5b80634571e3a61161017a57806363d5079b1161014957806363d5079b146103f15780636c30aaa214610411578063704b6c021461044d57806379968bbc1461046d57600080fd5b80634571e3a61461037a578063465600231461039a57806352631ab4146103ba5780635bd80ca6146103d157600080fd5b80632f2ff15d116101b65780632f2ff15d146102d157806331161e0b146102f357806336568abe1461032c57806339e16d641461034c57600080fd5b806301ffc9a7146101e8578063141a468c1461021d578063150b7a021461024e578063248a9ca314610293575b600080fd5b3480156101f457600080fd5b5061020861020336600461301f565b61069a565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610208610238366004613049565b61012f6020526000908152604090205460ff1681565b34801561025a57600080fd5b5061027a6102693660046130c0565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610214565b34801561029f57600080fd5b506102c36102ae366004613049565b60009081526065602052604090206001015490565b604051908152602001610214565b3480156102dd57600080fd5b506102f16102ec366004613133565b6106d1565b005b3480156102ff57600080fd5b5061013054610314906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b34801561033857600080fd5b506102f1610347366004613133565b6106fb565b34801561035857600080fd5b506102c3610367366004613163565b61012e6020526000908152604090205481565b34801561038657600080fd5b506102f1610395366004613223565b61077e565b3480156103a657600080fd5b506102f16103b5366004613285565b6109f3565b3480156103c657600080fd5b506102c36101335481565b3480156103dd57600080fd5b506102086103ec3660046132ce565b610a86565b3480156103fd57600080fd5b506102f161040c366004613285565b610bf2565b34801561041d57600080fd5b5061020861042c366004613285565b805160208183018101805161012d8252928201919093012091525460ff1681565b34801561045957600080fd5b506102f1610468366004613163565b610c7a565b34801561047957600080fd5b506102c37f401e9638419b634c602998da0d7966f95cf0b3bc314e071b21ba0a541b989e5d81565b3480156104ad57600080fd5b506102086104bc366004613133565b610d50565b3480156104cd57600080fd5b506102f16104dc366004613163565b610d7b565b6102086104ef36600461330e565b610e3a565b34801561050057600080fd5b506102c3600081565b34801561051557600080fd5b506102f1610524366004613163565b611291565b34801561053557600080fd5b506102c3610544366004613367565b6112db565b34801561055557600080fd5b5061055e6113c3565b6040516102149190613400565b34801561057757600080fd5b506102086105863660046132ce565b611452565b34801561059757600080fd5b506102f16105a6366004613133565b61158b565b3480156105b757600080fd5b506102086105c636600461330e565b6115b0565b3480156105d757600080fd5b506102f16105e6366004613163565b6118aa565b3480156105f757600080fd5b5061013154610314906001600160a01b031681565b34801561061857600080fd5b5061013254610314906001600160a01b031681565b34801561063957600080fd5b5061027a610648366004613413565b63f23a6e6160e01b9695505050505050565b34801561066657600080fd5b506102f161067536600461348f565b6118f4565b34801561068657600080fd5b506102c36106953660046134bb565b611b5e565b60006001600160e01b03198216637965db0b60e01b14806106cb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152606560205260409020600101546106ec81611c40565b6106f68383611c4d565b505050565b6001600160a01b03811633146107705760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61077a8282611cd3565b5050565b600054610100900460ff161580801561079e5750600054600160ff909116105b806107b85750303b1580156107b8575060005460ff166001145b61081b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610767565b6000805460ff19166001179055801561083e576000805461ff0019166101001790555b6001600160a01b0384166108b35760405162461bcd60e51b815260206004820152603660248201527f4272696467653a2064656661756c7420626f74206d657373656e6765722063616044820152756e206e6f74206265207a65726f20616464726573732160501b6064820152608401610767565b6001600160a01b03831661091d5760405162461bcd60e51b815260206004820152602b60248201527f4272696467653a20737461626c65636f696e2063616e206e6f74206265207a6560448201526a726f20616464726573732160a81b6064820152608401610767565b610928600033611d3a565b61013080546001600160a01b038087166001600160a01b031992831617909255610131805492861692909116919091179055815161096e90610134906020850190612f86565b50610130546109a7907f401e9638419b634c602998da0d7966f95cf0b3bc314e071b21ba0a541b989e5d906001600160a01b0316611d3a565b80156109ed576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6109fe600033610d50565b610a1a5760405162461bcd60e51b8152600401610767906134f4565b600061012d82604051610a2d9190613537565b908152604051908190036020018120805492151560ff19909316929092179091557f10af96e721b3a4e477e01fd9fb9464be7c57b780da59ea18601c87fbf1437ac190610a7b908390613400565b60405180910390a150565b6000610a90611d44565b60003390506000610b2d82856101348054610aaa90613553565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad690613553565b8015610b235780601f10610af857610100808354040283529160200191610b23565b820191906000526020600020905b815481529060010190602001808311610b0657829003601f168201915b5050505050611d9e565b9050610b57816060860135610b4860a088016080890161359d565b8760a001358860c00135611e17565b610b788583610b6c6040880160208901613163565b6040880135883561205f565b60408401803590610b8c9060208701613163565b6001600160a01b0316836001600160a01b03167fbafa86118be622f121710cad82878e2e567d1cdf9644c3940170b20d7f12bf8588868960000135610134604051610bda94939291906135f2565b60405180910390a46001925050506106cb6001609755565b610bfd600033610d50565b610c195760405162461bcd60e51b8152600401610767906134f4565b600161012d82604051610c2c9190613537565b908152604051908190036020018120805492151560ff19909316929092179091557faf11741ff825b25bdae46209ed372070c66ffe89b1f4b4ae5f9edcea8e333d9490610a7b908390613400565b610c85600033610d50565b610ca15760405162461bcd60e51b8152600401610767906134f4565b6001600160a01b038116610d0e5760405162461bcd60e51b815260206004820152602e60248201527f4272696467653a206e65772061646d696e2063616e206e6f742068617665206160448201526d207a65726f20616464726573732160901b6064820152608401610767565b610d196000826106d1565b6040516001600160a01b038216907f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d86600033610d50565b610da25760405162461bcd60e51b8152600401610767906134f4565b6001600160a01b038116610e175760405162461bcd60e51b815260206004820152603660248201527f4272696467653a206e657720626f74206d657373656e6765722063616e206e6f6044820152757420686176652061207a65726f20616464726573732160501b6064820152608401610767565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e4960808301836136c0565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161012d9250610e8f91508390613537565b9081526040519081900360200190205460ff16610ebe5760405162461bcd60e51b815260040161076790613707565b610ec6611d44565b6000846003811115610eda57610eda6135ba565b14610f43573415610f435760405162461bcd60e51b815260206004820152602d60248201527f4272696467653a2077726f6e672061737365742c206f6e6c79206e617469766560448201526c206c6f636b2070617961626c6560981b6064820152608401610767565b336000610f4f856125cd565b9050610f7e81610100870135610f6d61014089016101208a0161359d565b886101400135896101600135611e17565b600080876003811115610f9357610f936135ba565b1480610fb057506001876003811115610fae57610fae6135ba565b145b15610fdc57610fd5863560a088013560c08901356105446101008b0160e08c0161374a565b9050610ffa565b610ff7863560a08801356106956101008a0160e08b0161374a565b90505b61100b610100870160e0880161374a565b1561102957610132546110299084906001600160a01b03168361265d565b61103a610100870160e0880161374a565b15801561105857506001876003811115611056576110566135ba565b145b1561107757611077836110716040890160208a01613163565b8361265d565b611088610100870160e0880161374a565b1580156110a6575060008760038111156110a4576110a46135ba565b145b15611176576110b681873561377d565b34101561112b5760405162461bcd60e51b815260206004820152603d60248201527f4272696467653a206e6f7420656e6f756768206e617469766520746f6b656e7360448201527f20776572652073656e7420746f20636f766572207468652066656573210000006064820152608401610767565b8061012e600061114160408a0160208b01613163565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254611170919061377d565b90915550505b611187610100870160e0880161374a565b1580156111c0575060028760038111156111a3576111a36135ba565b14806111c0575060038760038111156111be576111be6135ba565b145b156111de57610131546111de9084906001600160a01b03168361265d565b6111ff87846111f360408a0160208b01613163565b60408a01358a356126bf565b604086018035906112139060208901613163565b6001600160a01b039081169085167f25c221ba91ec7f6f8d3ac9adca71e94956c4d2b21e8432340d4cfebb7288c3498a61125060608c018c6136c0565b8c3561125f60808f018f6136c0565b604051611271969594939291906137be565b60405180910390a46001945050505061128a6001609755565b5092915050565b61129c600033610d50565b6112b85760405162461bcd60e51b8152600401610767906134f4565b61013280546001600160a01b0319166001600160a01b0392909216919091179055565b600080821561134557836112f060e188613805565b6112fa9190613824565b90506102ee811161130d576102ee61130f565b805b9050613a98811061132257613a98611324565b805b9050620186a06113348683613805565b61133e9190613824565b90506113b8565b8361135a57620186a061133461012c88613805565b8361136761012c88613805565b6113719190613824565b90506103e88111611384576103e8611386565b805b9050614e20811061139957614e2061139b565b805b9050620186a06113ab8583613805565b6113b59190613824565b90505b90505b949350505050565b61013480546113d190613553565b80601f01602080910402602001604051908101604052809291908181526020018280546113fd90613553565b801561144a5780601f1061141f5761010080835404028352916020019161144a565b820191906000526020600020905b81548152906001019060200180831161142d57829003601f168201915b505050505081565b600061145c611d44565b6000836003811115611470576114706135ba565b14156114d35760405162461bcd60e51b815260206004820152602c60248201527f4272696467653a2077726f6e672061737365742c2063616e2774206d696e742060448201526b3730ba34bb32903a37b5b2b760a11b6064820152608401610767565b600033905060006114ed82856101348054610aaa90613553565b9050611508816060860135610b4860a088016080890161359d565b611529858361151d6040880160208901613163565b60408801358835612822565b6040840180359061153d9060208701613163565b6001600160a01b0316836001600160a01b03167f9634234c639878ca546a1a53fcf4fc38bfa7bffb8f00e56e1c0ebed000c5731988868960000135610134604051610bda94939291906135f2565b6000828152606560205260409020600101546115a681611c40565b6106f68383611cd3565b60006115bf60808301836136c0565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161012d925061160591508390613537565b9081526040519081900360200190205460ff166116345760405162461bcd60e51b815260040161076790613707565b61163c611d44565b6000846003811115611650576116506135ba565b14156116b35760405162461bcd60e51b815260206004820152602c60248201527f4272696467653a2077726f6e672061737365742c2063616e2774206275726e2060448201526b3730ba34bb32903a37b5b2b760a11b6064820152608401610767565b3360006116bf856125cd565b90506116dd81610100870135610f6d61014089016101208a0161359d565b6000808760038111156116f2576116f26135ba565b148061170f5750600187600381111561170d5761170d6135ba565b145b1561173b57611734863560a088013560c08901356105446101008b0160e08c0161374a565b9050611759565b611756863560a08801356106956101008a0160e08b0161374a565b90505b61176a610100870160e0880161374a565b1561178857610132546117889084906001600160a01b03168361265d565b611799610100870160e0880161374a565b1580156117b7575060018760038111156117b5576117b56135ba565b145b156117d0576117d0836110716040890160208a01613163565b6117e1610100870160e0880161374a565b15801561181a575060028760038111156117fd576117fd6135ba565b148061181a57506003876003811115611818576118186135ba565b145b1561183857610131546118389084906001600160a01b03168361265d565b611859878461184d60408a0160208b01613163565b60408a01358a35612916565b6040860180359061186d9060208901613163565b6001600160a01b039081169085167fa3dc7d629c91651fb935be26cbf4f3193d14c6b7e286c96c7f79ad6bb2466e6f8a61125060608c018c6136c0565b6118b5600033610d50565b6118d15760405162461bcd60e51b8152600401610767906134f4565b61013180546001600160a01b0319166001600160a01b0392909216919091179055565b6118fc611d44565b611907600033610d50565b6119235760405162461bcd60e51b8152600401610767906134f4565b6001600160a01b038216600090815261012e60205260409020546119a05760405162461bcd60e51b815260206004820152602e60248201527f4272696467653a206e6f2066656573207765726520636f6c6c6563746564206660448201526d6f72207468697320746f6b656e2160901b6064820152608401610767565b6001600160a01b038216600090815261012e6020526040902054811115611a225760405162461bcd60e51b815260206004820152603060248201527f4272696467653a20616d6f756e74206f66206665657320746f2077697468647260448201526f617720697320746f6f206c617267652160801b6064820152608401610767565b6001600160a01b038216600090815261012e602052604081208054839290611a4b908490613846565b90915550506001600160a01b038216611b0b57604051600090339083908381818185875af1925050503d8060008114611aa0576040519150601f19603f3d011682016040523d82523d6000602084013e611aa5565b606091505b5050905080611b055760405162461bcd60e51b815260206004820152602660248201527f4272696467653a206e617469766520746f6b656e73207769746864726177206660448201526561696c65642160d01b6064820152608401610767565b50611b1f565b611b1f6001600160a01b0383163383612aeb565b60405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a261077a6001609755565b6000808215611b9357611b73614e2085613805565b611b7d9086613805565b9050611b8c620186a082613824565b90506113bb565b610131546040805163313ce56760e01b81529051617530926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015611bda57600080fd5b505afa158015611bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c12919061385d565b611c1d90600a61395e565b611c279087613805565b611c319190613805565b90506113b8620186a082613824565b611c4a8133612b4e565b50565b611c578282610d50565b61077a5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c8f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611cdd8282610d50565b1561077a5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61077a8282611c4d565b60026097541415611d975760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610767565b6002609755565b6000807f65d05d260bf47ac1aa6c5d8364046ce4173e0e5f127655749f9ae586ec4880f5858535611dd56040880160208901613163565b8760400135878960600135604051602001611df6979695949392919061396d565b60408051808303601f19018152919052805160209091012095945050505050565b600084815261012f602052604090205460ff1615611e825760405162461bcd60e51b815260206004820152602260248201527f4272696467653a207265717565737420616c72656164792070726f6365737365604482015261642160f01b6064820152608401610767565b6000611f748660408051808201825260018152603160f81b602080830191825283518085018552600e81526d537461726761746542726964676560901b908201529151902082517f31c569877b7458562e8ccbbd55ce7cacb56f44901719d688433e2a9a04877e65818401527f2c36991225d1a8da1611aee73594202fc2b7a578d8abf67221c3c385b89a16178185015260608101919091524660808201523060a0808301919091528351808303909101815260c08201845280519083012061190160f01b60e083015260e2820152610102808201949094528251808203909401845261012201909152815191012090565b6040805160008082526020820180845284905260ff88169282019290925260608101869052608081018590529192509060019060a0016020604051602081039080840390855afa158015611fcc573d6000803e3d6000fd5b5050604051601f190151610130549092506001600160a01b0380841691161490506120395760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20696e76616c6964207369676e6174757265210000000000006044820152606401610767565b505050600083815261012f60205260409020805460ff1916600117905550506101335550565b6000856003811115612073576120736135ba565b14156121a457804710156120ef5760405162461bcd60e51b815260206004820152603760248201527f4272696467653a206e6f7420656e6f756768206e617469766520746f6b656e7360448201527f206f6e20746865206272696467652062616c616e6365210000000000000000006064820152608401610767565b6000846001600160a01b03168260405160006040518083038185875af1925050503d806000811461213c576040519150601f19603f3d011682016040523d82523d6000602084013e612141565b606091505b505090508061219e5760405162461bcd60e51b8152602060048201526024808201527f4272696467653a206e617469766520746f6b656e7320756e6c6f636b206661696044820152636c65642160e01b6064820152608401610767565b506125c6565b60018560038111156121b8576121b86135ba565b14156122bd576040516370a0823160e01b815230600482015281906001600160a01b038516906370a082319060240160206040518083038186803b1580156121ff57600080fd5b505afa158015612213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223791906139c1565b10156122a45760405162461bcd60e51b815260206004820152603660248201527f4272696467653a206e6f7420656e6f75676820455243323020746f6b656e73206044820152756f6e20746865206272696467652062616c616e63652160501b6064820152608401610767565b6122b86001600160a01b0384168583612aeb565b6125c6565b60028560038111156122d1576122d16135ba565b141561242c576040516331a9108f60e11b81526004810183905230906001600160a01b03851690636352211e9060240160206040518083038186803b15801561231957600080fd5b505afa15801561232d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235191906139da565b6001600160a01b0316146123be5760405162461bcd60e51b815260206004820152602e60248201527f4272696467653a2062726964676520646f65736e2774206f776e20746f6b656e60448201526d207769746820746869732049442160901b6064820152608401610767565b604051632142170760e11b81523060048201526001600160a01b038581166024830152604482018490528416906342842e0e906064015b600060405180830381600087803b15801561240f57600080fd5b505af1158015612423573d6000803e3d6000fd5b505050506125c6565b6003856003811115612440576124406135ba565b141561258857604051627eeac760e11b8152306004820152602481018390526000906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561248d57600080fd5b505afa1580156124a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c591906139c1565b116125385760405162461bcd60e51b815260206004820152603860248201527f4272696467653a206e6f7420656e6f756768204552433131353520746f6b656e60448201527f73206f6e20746865206272696467652062616c616e63652100000000000000006064820152608401610767565b604080518082018252600881526734b0b6ba37b5b2b760c11b60208201529051637921219560e11b81526001600160a01b0385169163f242432a916123f5913091899188918891906004016139f7565b60405162461bcd60e51b8152602060048201526013602482015272109c9a5919d94e881ddc9bdb99c8185cdcd95d606a1b6044820152606401610767565b5050505050565b6000807f0c57230c111c08b3fb7d631c6ea9c697d84e44f91fb497de198e07f8c73a844960a084013560c085013561260b6040870160208801613163565b60408051602081019590955284019290925260608301526001600160a01b0316608082015261010084013560a082015260c00160408051601f1981840301815291905280516020909101209392505050565b6001600160a01b0382161580612671575080155b1561267b57505050565b6001600160a01b038216600090815261012e6020526040812080548392906126a490849061377d565b909155506106f690506001600160a01b038316843084612ba7565b60008560038111156126d3576126d36135ba565b141561273457803410156122b85760405162461bcd60e51b815260206004820152602260248201527f4272696467653a2077726f6e67206e617469766520746f6b656e7320616d6f756044820152611b9d60f21b6064820152608401610767565b6001856003811115612748576127486135ba565b1415612763576122b86001600160a01b038416853084612ba7565b6002856003811115612777576127776135ba565b14156127b857604051632142170760e11b81526001600160a01b038581166004830152306024830152604482018490528416906342842e0e906064016123f5565b60038560038111156127cc576127cc6135ba565b141561258857604080518082018252600881526734b0b6ba37b5b2b760c11b60208201529051637921219560e11b81526001600160a01b0385169163f242432a916123f5918891309188918891906004016139f7565b6001856003811115612836576128366135ba565b1415612871576040516340c10f1960e01b81526001600160a01b038581166004830152602482018390528416906340c10f19906044016123f5565b6002856003811115612885576128856135ba565b14156128c0576040516340c10f1960e01b81526001600160a01b038581166004830152602482018490528416906340c10f19906044016123f5565b60038560038111156128d4576128d46135ba565b141561258857604051630ab714fb60e11b81526001600160a01b038581166004830152602482018490526044820183905284169063156e29f6906064016123f5565b600185600381111561292a5761292a6135ba565b141561296557604051632770a7eb60e21b81526001600160a01b03858116600483015260248201839052841690639dc29fac906044016123f5565b6002856003811115612979576129796135ba565b1415612a95576040516331a9108f60e11b81526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b1580156129c157600080fd5b505afa1580156129d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f991906139da565b6001600160a01b031614612a685760405162461bcd60e51b815260206004820152603060248201527f4272696467653a2063616e6e6f74206275726e204552433732312c206d73672e60448201526f39b2b73232b9103737ba1037bbb732b960811b6064820152608401610767565b604051630852cd8d60e31b8152600481018390526001600160a01b038416906342966c68906024016123f5565b6003856003811115612aa957612aa96135ba565b141561258857604051637a94c56560e11b81526001600160a01b038581166004830152602482018490526044820183905284169063f5298aca906064016123f5565b6040516001600160a01b0383166024820152604481018290526106f690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bdf565b612b588282610d50565b61077a57612b6581612cb1565b612b70836020612cc3565b604051602001612b81929190613a31565b60408051601f198184030181529082905262461bcd60e51b825261076791600401613400565b6040516001600160a01b03808516602483015283166044820152606481018290526109ed9085906323b872dd60e01b90608401612b17565b6000612c34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e669092919063ffffffff16565b8051909150156106f65780806020019051810190612c529190613aa6565b6106f65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610767565b60606106cb6001600160a01b03831660145b60606000612cd2836002613805565b612cdd90600261377d565b67ffffffffffffffff811115612cf557612cf5613180565b6040519080825280601f01601f191660200182016040528015612d1f576020820181803683370190505b509050600360fc1b81600081518110612d3a57612d3a613ac3565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d6957612d69613ac3565b60200101906001600160f81b031916908160001a9053506000612d8d846002613805565b612d9890600161377d565b90505b6001811115612e10576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612dcc57612dcc613ac3565b1a60f81b828281518110612de257612de2613ac3565b60200101906001600160f81b031916908160001a90535060049490941c93612e0981613ad9565b9050612d9b565b508315612e5f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610767565b9392505050565b60606113bb848460008585600080866001600160a01b03168587604051612e8d9190613537565b60006040518083038185875af1925050503d8060008114612eca576040519150601f19603f3d011682016040523d82523d6000602084013e612ecf565b606091505b5091509150612ee087838387612eeb565b979650505050505050565b60608315612f57578251612f50576001600160a01b0385163b612f505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610767565b50816113bb565b6113bb8383815115612f6c5781518083602001fd5b8060405162461bcd60e51b81526004016107679190613400565b828054612f9290613553565b90600052602060002090601f016020900481019282612fb45760008555612ffa565b82601f10612fcd57805160ff1916838001178555612ffa565b82800160010185558215612ffa579182015b82811115612ffa578251825591602001919060010190612fdf565b5061300692915061300a565b5090565b5b80821115613006576000815560010161300b565b60006020828403121561303157600080fd5b81356001600160e01b031981168114612e5f57600080fd5b60006020828403121561305b57600080fd5b5035919050565b6001600160a01b0381168114611c4a57600080fd5b60008083601f84011261308957600080fd5b50813567ffffffffffffffff8111156130a157600080fd5b6020830191508360208285010111156130b957600080fd5b9250929050565b6000806000806000608086880312156130d857600080fd5b85356130e381613062565b945060208601356130f381613062565b935060408601359250606086013567ffffffffffffffff81111561311657600080fd5b61312288828901613077565b969995985093965092949392505050565b6000806040838503121561314657600080fd5b82359150602083013561315881613062565b809150509250929050565b60006020828403121561317557600080fd5b8135612e5f81613062565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126131a757600080fd5b813567ffffffffffffffff808211156131c2576131c2613180565b604051601f8301601f19908116603f011681019082821181831017156131ea576131ea613180565b8160405283815286602085880101111561320357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561323857600080fd5b833561324381613062565b9250602084013561325381613062565b9150604084013567ffffffffffffffff81111561326f57600080fd5b61327b86828701613196565b9150509250925092565b60006020828403121561329757600080fd5b813567ffffffffffffffff8111156132ae57600080fd5b6113bb84828501613196565b8035600481106132c957600080fd5b919050565b6000808284036101008112156132e357600080fd5b6132ec846132ba565b925060e0601f198201121561330057600080fd5b506020830190509250929050565b6000806040838503121561332157600080fd5b61332a836132ba565b9150602083013567ffffffffffffffff81111561334657600080fd5b8301610180818603121561315857600080fd5b8015158114611c4a57600080fd5b6000806000806080858703121561337d57600080fd5b843593506020850135925060408501359150606085013561339d81613359565b939692955090935050565b60005b838110156133c35781810151838201526020016133ab565b838111156109ed5750506000910152565b600081518084526133ec8160208601602086016133a8565b601f01601f19169290920160200192915050565b602081526000612e5f60208301846133d4565b60008060008060008060a0878903121561342c57600080fd5b863561343781613062565b9550602087013561344781613062565b94506040870135935060608701359250608087013567ffffffffffffffff81111561347157600080fd5b61347d89828a01613077565b979a9699509497509295939492505050565b600080604083850312156134a257600080fd5b82356134ad81613062565b946020939093013593505050565b6000806000606084860312156134d057600080fd5b833592506020840135915060408401356134e981613359565b809150509250925092565b60208082526023908201527f4272696467653a207468652063616c6c6572206973206e6f7420616e2061646d604082015262696e2160e81b606082015260800190565b600082516135498184602087016133a8565b9190910192915050565b600181811c9082168061356757607f821691505b6020821081141561358857634e487b7160e01b600052602260045260246000fd5b50919050565b60ff81168114611c4a57600080fd5b6000602082840312156135af57600080fd5b8135612e5f8161358e565b634e487b7160e01b600052602160045260246000fd5b600481106135ee57634e487b7160e01b600052602160045260246000fd5b9052565b6135fc81866135d0565b6000602060018060a01b03861681840152846040840152608060608401526000845481600182811c91508083168061363557607f831692505b85831081141561365357634e487b7160e01b85526022600452602485fd5b6080880183905260a088018180156136725760018114613683576136ae565b60ff198616825287820196506136ae565b60008b81526020902060005b868110156136a85781548482015290850190890161368f565b83019750505b50949c9b505050505050505050505050565b6000808335601e198436030181126136d757600080fd5b83018035915067ffffffffffffffff8211156136f257600080fd5b6020019150368190038213156130b957600080fd5b60208082526023908201527f4272696467653a2074686520636861696e206973206e6f7420737570706f727460408201526265642160e81b606082015260800190565b60006020828403121561375c57600080fd5b8135612e5f81613359565b634e487b7160e01b600052601160045260246000fd5b6000821982111561379057613790613767565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6137c881886135d0565b6080602082015260006137df608083018789613795565b85604084015282810360608401526137f8818587613795565b9998505050505050505050565b600081600019048311821515161561381f5761381f613767565b500290565b60008261384157634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561385857613858613767565b500390565b60006020828403121561386f57600080fd5b8151612e5f8161358e565b600181815b808511156138b557816000190482111561389b5761389b613767565b808516156138a857918102915b93841c939080029061387f565b509250929050565b6000826138cc575060016106cb565b816138d9575060006106cb565b81600181146138ef57600281146138f957613915565b60019150506106cb565b60ff84111561390a5761390a613767565b50506001821b6106cb565b5060208310610133831016604e8410600b8410161715613938575081810a6106cb565b613942838361387a565b806000190482111561395657613956613767565b029392505050565b6000612e5f60ff8416836138bd565b8781526001600160a01b03878116602083015260408201879052851660608201526080810184905260e060a082018190526000906139ad908301856133d4565b90508260c083015298975050505050505050565b6000602082840312156139d357600080fd5b5051919050565b6000602082840312156139ec57600080fd5b8151612e5f81613062565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ee0908301846133d4565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613a698160178501602088016133a8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613a9a8160288401602088016133a8565b01602801949350505050565b600060208284031215613ab857600080fd5b8151612e5f81613359565b634e487b7160e01b600052603260045260246000fd5b600081613ae857613ae8613767565b50600019019056fea2646970667358221220255c913bb98200e254d38cc95d7a5d66b76a8db59a95d6780f480903e539bfb164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burnWithPermit(uint8,(uint256,address,uint256,string,string,uint256,uint256,bool,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "assetType": "0-native, 1-ERC20, 2-ERC721, 3-ERC1155",
          "params": "sourceBridgeParams structure (see definition in IBridge.sol)"
        },
        "returns": {
          "_0": "True if tokens were burned successfully"
        }
      },
      "calcFeeFixed(uint256,uint256,bool)": {
        "params": {
          "amount": "An amount of tokens that were sent (always 1 if ERC721)",
          "payFeesWithST": "true if user choose to pay fees with stargate tokens",
          "stargateAmountForOneUsd": "Stargate tokens (ST) amount for one USD"
        },
        "returns": {
          "_0": "The fee amount in ST or USD depending on user's preferences"
        }
      },
      "calcFeeScaled(uint256,uint256,uint256,bool)": {
        "params": {
          "amount": "An amount of TT tokens that were sent",
          "payFeesWithST": "true if user choose to pay fees with stargate tokens",
          "stargateAmountForOneUsd": "Stargate tokens (ST) amount for one USD",
          "transferedTokensAmountForOneUsd": "TT tokens amount for one USD"
        },
        "returns": {
          "_0": "The fee amount in ST or TT depending on user's preferences"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,string)": {
        "params": {
          "_botMessenger": "The address of bot messenger",
          "_chain": "The chain bridge was deployed to",
          "_stablecoin": "The address of USD stablecoin"
        }
      },
      "lockWithPermit(uint8,(uint256,address,uint256,string,string,uint256,uint256,bool,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "assetType": "0-native, 1-ERC20, 2-ERC721, 3-ERC1155",
          "params": "sourceBridgeParams structure (see definition in IBridge.sol)"
        },
        "returns": {
          "_0": "True if tokens were locked successfully"
        }
      },
      "mintWithPermit(uint8,(uint256,address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "assetType": "0-native, 1-ERC20, 2-ERC721, 3-ERC1155",
          "params": "targetBridgeParams structure (see definition in IBridge.sol)"
        },
        "returns": {
          "_0": "True if tokens were minted successfully"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Should return the selector of itselfWhenever an ERC1155 token is transferred to this contract       via ERC1155.safeTransferFrom this function is called   "
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Should return the selector of itselfWhenever an ERC721 token is transferred to this contract       via ERC721.safeTransferFrom this function is called   "
      },
      "removeSupportedChain(string)": {
        "params": {
          "oldChain": "The name of the chain"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAdmin(address)": {
        "params": {
          "newAdmin": "Address of the admin   "
        }
      },
      "setBotMessenger(address)": {
        "params": {
          "newBotMessenger": "Address of the bot messenger (backend server)   "
        }
      },
      "setStablecoin(address)": {
        "params": {
          "newStablecoin": "Address of the stablecoin"
        }
      },
      "setStargateToken(address)": {
        "params": {
          "newStargateToken": "Address of the stargate token   "
        }
      },
      "setSupportedChain(string)": {
        "params": {
          "newChain": "The name of the chain"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unlockWithPermit(uint8,(uint256,address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "assetType": "0-native, 1-ERC20, 2-ERC721, 3-ERC1155",
          "params": "targetBridgeParams structure (see definition in IBridge.sol)"
        },
        "returns": {
          "_0": "True if tokens were unlocked successfully"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "The amount of fees from a single token to be withdrawn",
          "token": "The address of the token which transfers collected fees"
        }
      }
    },
    "stateVariables": {
      "lastNonce": {
        "details": "Last verified nonce"
      },
      "nonces": {
        "details": "Monitor nonces. Prevent replay attacks"
      },
      "supportedChains": {
        "details": "Names of supported chains"
      },
      "tokenFees": {
        "details": "Monitor fees for ERC20 tokensMap from token address to fees"
      }
    },
    "title": "A bridge contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Burn(uint8,address,string,uint256,address,uint256,string)": {
        "notice": "Indicates that tokens were burnt in the target chain"
      },
      "Lock(uint8,address,string,uint256,address,uint256,string)": {
        "notice": "Indicates that tokens were locked in the source chain"
      },
      "Mint(uint8,address,address,uint256,address,uint256,string)": {
        "notice": "Indicates that tokens were minted by permitted user"
      },
      "RemoveChain(string)": {
        "notice": "Indicates that a chain is no longer supported"
      },
      "SetAdmin(address)": {
        "notice": "Indicates that the a admin was set"
      },
      "SetFeeRate(uint256)": {
        "notice": "Indicates that a new fee rate was set"
      },
      "SetNewChain(string)": {
        "notice": "Indicates that a new supported chain was set"
      },
      "Unlock(uint8,address,address,uint256,address,uint256,string)": {
        "notice": "Indicates that tokens were unlocked in the source chain"
      },
      "Withdraw(address,uint256)": {
        "notice": "Indicates that token fees were withdrawn"
      }
    },
    "kind": "user",
    "methods": {
      "burnWithPermit(uint8,(uint256,address,uint256,string,string,uint256,uint256,bool,uint256,uint8,bytes32,bytes32))": {
        "notice": "Burn tokens if the user is permitted to burn"
      },
      "calcFeeFixed(uint256,uint256,bool)": {
        "notice": "Calculates a fee for bridge operations with ERC721 and ERC1155 tokens"
      },
      "calcFeeScaled(uint256,uint256,uint256,bool)": {
        "notice": "Calculates a fee for bridge operations with ERC20 and native tokens"
      },
      "chain()": {
        "notice": "The chain bringe was deployed to"
      },
      "initialize(address,address,string)": {
        "notice": "Initializes internal variables, sets roles"
      },
      "lockWithPermit(uint8,(uint256,address,uint256,string,string,uint256,uint256,bool,uint256,uint8,bytes32,bytes32))": {
        "notice": "Locks tokens if the user is permitted to lock"
      },
      "mintWithPermit(uint8,(uint256,address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Mint tokens if the user is permitted to mint"
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "Allow this contract to receiver ERC1155 tokens"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Allow this contract to receiver ERC721 tokens"
      },
      "removeSupportedChain(string)": {
        "notice": "Removes a chain supported by the bridge"
      },
      "setAdmin(address)": {
        "notice": "Sets the admin"
      },
      "setBotMessenger(address)": {
        "notice": "Sets the bot messenger"
      },
      "setStablecoin(address)": {
        "notice": "Sets the stablecoin"
      },
      "setStargateToken(address)": {
        "notice": "Sets the stargate token"
      },
      "setSupportedChain(string)": {
        "notice": "Adds a chain supported by the bridge"
      },
      "unlockWithPermit(uint8,(uint256,address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Unlocks tokens if the user is permitted to unlock"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraws fees accumulated from a specific token operations"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 418,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2007,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2226,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 591,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 649,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3484,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)100_storage"
      },
      {
        "astId": 3489,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "supportedChains",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 3494,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "tokenFees",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3499,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "nonces",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3506,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "botMessenger",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 3508,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "stablecoin",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 3510,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "stargateToken",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 3513,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "lastNonce",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 3516,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "chain",
        "offset": 0,
        "slot": "308",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)100_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[100]",
        "numberOfBytes": "3200"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}